{"id":"HumanEval_142_sum_squares","lql":"Problem {\n  sumSquares(java.util.ArrayList\u003cjava.lang.Long\u003e)-\u003elong\n}","sequences":[{"id":"Problem","statements":[{"operation":"sumSquares","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l, (long) 2l, (long) 3l))","value":[1,2,3],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"6l","value":6,"type":"java.lang.Long"}]}]},{"id":"Problem","statements":[{"operation":"sumSquares","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l, (long) 4l, (long) 9l))","value":[1,4,9],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"14l","value":14,"type":"java.lang.Long"}]}]},{"id":"Problem","statements":[{"operation":"sumSquares","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList())","value":[],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"0l","value":0,"type":"java.lang.Long"}]}]},{"id":"Problem","statements":[{"operation":"sumSquares","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l, (long) 1l, (long) 1l, (long) 1l, (long) 1l, (long) 1l, (long) 1l, (long) 1l, (long) 1l))","value":[1,1,1,1,1,1,1,1,1],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"9l","value":9,"type":"java.lang.Long"}]}]},{"id":"Problem","statements":[{"operation":"sumSquares","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) -1l, (long) -1l, (long) -1l, (long) -1l, (long) -1l, (long) -1l, (long) -1l, (long) -1l, (long) -1l))","value":[-1,-1,-1,-1,-1,-1,-1,-1,-1],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"-3l","value":-3,"type":"java.lang.Long"}]}]},{"id":"Problem","statements":[{"operation":"sumSquares","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 0l))","value":[0],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"0l","value":0,"type":"java.lang.Long"}]}]},{"id":"Problem","statements":[{"operation":"sumSquares","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) -1l, (long) -5l, (long) 2l, (long) -1l, (long) -5l))","value":[-1,-5,2,-1,-5],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"-126l","value":-126,"type":"java.lang.Long"}]}]},{"id":"Problem","statements":[{"operation":"sumSquares","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) -56l, (long) -99l, (long) 1l, (long) 0l, (long) -2l))","value":[-56,-99,1,0,-2],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"3030l","value":3030,"type":"java.lang.Long"}]}]},{"id":"Problem","statements":[{"operation":"sumSquares","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) -1l, (long) 0l, (long) 0l, (long) 0l, (long) 0l, (long) 0l, (long) 0l, (long) 0l, (long) -1l))","value":[-1,0,0,0,0,0,0,0,-1],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"0l","value":0,"type":"java.lang.Long"}]}]},{"id":"Problem","statements":[{"operation":"sumSquares","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) -16l, (long) -9l, (long) -2l, (long) 36l, (long) 36l, (long) 26l, (long) -20l, (long) 25l, (long) -40l, (long) 20l, (long) -4l, (long) 12l, (long) -26l, (long) 35l, (long) 37l))","value":[-16,-9,-2,36,36,26,-20,25,-40,20,-4,12,-26,35,37],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"-14196l","value":-14196,"type":"java.lang.Long"}]}]},{"id":"Problem","statements":[{"operation":"sumSquares","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) -1l, (long) -3l, (long) 17l, (long) -1l, (long) -15l, (long) 13l, (long) -1l, (long) 14l, (long) -14l, (long) -12l, (long) -5l, (long) 14l, (long) -14l, (long) 6l, (long) 13l, (long) 11l, (long) 16l, (long) 16l, (long) 4l, (long) 10l))","value":[-1,-3,17,-1,-15,13,-1,14,-14,-12,-5,14,-14,6,13,11,16,16,4,10],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"-1448l","value":-1448,"type":"java.lang.Long"}]}]}],"description":" \"\n This function will take an array array list of integers. For all entries in the array list, the function shall square the integer entry if its index is a \n multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n change the entries in the array list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n Examples:\n \u003e\u003e\u003e lst\n (long)new ArrayList\u003cLong\u003e(Arrays.asList((long)1l, (long)2l, (long)3l))\n \u003e\u003e\u003e lst\n (long)new ArrayList\u003cLong\u003e(Arrays.asList())\n \u003e\u003e\u003e lst"}