{"id":"HumanEval_95_check_dict_case","lql":"Problem {\n  checkDictCase(java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e)-\u003eboolean\n}","sequences":[{"id":"Problem","statements":[{"operation":"checkDictCase","inputs":[{"code":"new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e(java.util.Map.of(\"p\", \"pineapple\", \"b\", \"banana\"))","value":{"p":"pineapple","b":"banana"},"type":"java.util.HashMap"}],"expectedOutputs":[{"code":"true","value":true,"type":"java.lang.Boolean"}]}]},{"id":"Problem","statements":[{"operation":"checkDictCase","inputs":[{"code":"new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e(java.util.Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\"))","value":{"p":"pineapple","A":"banana","B":"banana"},"type":"java.util.HashMap"}],"expectedOutputs":[{"code":"false","value":false,"type":"java.lang.Boolean"}]}]},{"id":"Problem","statements":[{"operation":"checkDictCase","inputs":[{"code":"new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e(java.util.Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\"))","value":{"p":"pineapple","a":"apple","5":"banana"},"type":"java.util.HashMap"}],"expectedOutputs":[{"code":"false","value":false,"type":"java.lang.Boolean"}]}]},{"id":"Problem","statements":[{"operation":"checkDictCase","inputs":[{"code":"new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e(java.util.Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\"))","value":{"City":"Houston","Age":"36","Name":"John"},"type":"java.util.HashMap"}],"expectedOutputs":[{"code":"false","value":false,"type":"java.lang.Boolean"}]}]},{"id":"Problem","statements":[{"operation":"checkDictCase","inputs":[{"code":"new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e(java.util.Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))","value":{"ZIP":"12345","STATE":"NC"},"type":"java.util.HashMap"}],"expectedOutputs":[{"code":"true","value":true,"type":"java.lang.Boolean"}]}]},{"id":"Problem","statements":[{"operation":"checkDictCase","inputs":[{"code":"new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e(java.util.Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))","value":{"fruit":"Orange","taste":"Sweet"},"type":"java.util.HashMap"}],"expectedOutputs":[{"code":"true","value":true,"type":"java.lang.Boolean"}]}]},{"id":"Problem","statements":[{"operation":"checkDictCase","inputs":[{"code":"new java.util.HashMap\u003cjava.lang.String, java.lang.String\u003e()","value":{},"type":"java.util.HashMap"}],"expectedOutputs":[{"code":"false","value":false,"type":"java.lang.Boolean"}]}]}],"description":" Given a hash map, return true if all keys are strings in lower \n case or all keys are strings in upper case, else return false.\n The function should return false is the given hash map is empty.\n Examples:\n \u003e\u003e\u003e checkDictCase((new HashMap\u003cString,String\u003e(Map.of(\"a\", \"apple\", \"b\", \"banana\"))))\n (true)\n \u003e\u003e\u003e checkDictCase((new HashMap\u003cString,String\u003e(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"banana\"))))\n (false)\n \u003e\u003e\u003e checkDictCase((new HashMap\u003cString,String\u003e(Map.of(\"a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n (false)\n \u003e\u003e\u003e checkDictCase((new HashMap\u003cString,String\u003e(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\"))))\n (false)\n \u003e\u003e\u003e checkDictCase((new HashMap\u003cString,String\u003e(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a hash map, return true if all keys are strings in lower \n    // case or all keys are strings in upper case, else return false.\n    // The function should return false is the given hash map is empty.\n    // Examples:\n    // \u003e\u003e\u003e checkDictCase((new HashMap\u003cString,String\u003e(Map.of(\"a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // \u003e\u003e\u003e checkDictCase((new HashMap\u003cString,String\u003e(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"banana\"))))\n    // (false)\n    // \u003e\u003e\u003e checkDictCase((new HashMap\u003cString,String\u003e(Map.of(\"a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // \u003e\u003e\u003e checkDictCase((new HashMap\u003cString,String\u003e(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // \u003e\u003e\u003e checkDictCase((new HashMap\u003cString,String\u003e(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n    // (true)\n    public static boolean checkDictCase(HashMap\u003cString,String\u003e dict) {\n"}