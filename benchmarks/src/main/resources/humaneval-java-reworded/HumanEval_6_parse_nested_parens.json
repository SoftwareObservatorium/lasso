{"id":"HumanEval_6_parse_nested_parens","lql":"Problem {\n  parseNestedParens(java.lang.String)-\u003ejava.util.ArrayList\u003cjava.lang.Long\u003e\n}","sequences":[{"id":"Problem","statements":[{"operation":"parseNestedParens","inputs":[{"code":"\"(()()) ((())) () ((())()())\"","value":"(()()) ((())) () ((())()())","type":"java.lang.String"}],"expectedOutputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 2l, (long) 3l, (long) 1l, (long) 3l))","value":[2,3,1,3],"type":"java.util.ArrayList"}]}]},{"id":"Problem","statements":[{"operation":"parseNestedParens","inputs":[{"code":"\"() (()) ((())) (((())))\"","value":"() (()) ((())) (((())))","type":"java.lang.String"}],"expectedOutputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l, (long) 2l, (long) 3l, (long) 4l))","value":[1,2,3,4],"type":"java.util.ArrayList"}]}]},{"id":"Problem","statements":[{"operation":"parseNestedParens","inputs":[{"code":"\"(()(())((())))\"","value":"(()(())((())))","type":"java.lang.String"}],"expectedOutputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 4l))","value":[4],"type":"java.util.ArrayList"}]}]}],"description":" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n For each of the group, output the deepest level of nesting of parentheses.\n E.g. (()()) has maximum two levels of nesting while ((())) has three.\n \u003e\u003e\u003e parseNestedParens((\"(()()) ((())) () ((())()())\"))","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // \u003e\u003e\u003e parseNestedParens((\"(()()) ((())) () ((())()())\"))\n    // (new ArrayList\u003cLong\u003e(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))\n    public static ArrayList\u003cLong\u003e parseNestedParens(String paren_string) {\n"}