{"id":"HumanEval_159_eat","lql":"Problem {\n  eat(long,long,long)-\u003ejava.util.ArrayList\u003cjava.lang.Long\u003e\n}","sequences":[{"id":"Problem","statements":[{"operation":"eat","inputs":[{"code":"5l","value":5,"type":"java.lang.Long"},{"code":"6l","value":6,"type":"java.lang.Long"},{"code":"10l","value":10,"type":"java.lang.Long"}],"expectedOutputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 11l, (long) 4l))","value":[11,4],"type":"java.util.ArrayList"}]}]},{"id":"Problem","statements":[{"operation":"eat","inputs":[{"code":"4l","value":4,"type":"java.lang.Long"},{"code":"8l","value":8,"type":"java.lang.Long"},{"code":"9l","value":9,"type":"java.lang.Long"}],"expectedOutputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 12l, (long) 1l))","value":[12,1],"type":"java.util.ArrayList"}]}]},{"id":"Problem","statements":[{"operation":"eat","inputs":[{"code":"1l","value":1,"type":"java.lang.Long"},{"code":"10l","value":10,"type":"java.lang.Long"},{"code":"10l","value":10,"type":"java.lang.Long"}],"expectedOutputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 11l, (long) 0l))","value":[11,0],"type":"java.util.ArrayList"}]}]},{"id":"Problem","statements":[{"operation":"eat","inputs":[{"code":"2l","value":2,"type":"java.lang.Long"},{"code":"11l","value":11,"type":"java.lang.Long"},{"code":"5l","value":5,"type":"java.lang.Long"}],"expectedOutputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 7l, (long) 0l))","value":[7,0],"type":"java.util.ArrayList"}]}]},{"id":"Problem","statements":[{"operation":"eat","inputs":[{"code":"4l","value":4,"type":"java.lang.Long"},{"code":"5l","value":5,"type":"java.lang.Long"},{"code":"7l","value":7,"type":"java.lang.Long"}],"expectedOutputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 9l, (long) 2l))","value":[9,2],"type":"java.util.ArrayList"}]}]},{"id":"Problem","statements":[{"operation":"eat","inputs":[{"code":"4l","value":4,"type":"java.lang.Long"},{"code":"5l","value":5,"type":"java.lang.Long"},{"code":"1l","value":1,"type":"java.lang.Long"}],"expectedOutputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 5l, (long) 0l))","value":[5,0],"type":"java.util.ArrayList"}]}]}],"description":" You\u0027re a hungry rabbit, and you already have eaten a certain number of carrots,\n but now you need to eat more carrots to complete the day\u0027s meals.\n you should return an array array list of [ total number of eaten carrots after your meals,\n the number of carrots left after your meals ]\n if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n Example:\n \u003e\u003e\u003e eat((5l), (6l), (10l))\n (new ArrayList\u003cLong\u003e(Arrays.asList((long)11l, (long)4l)))\n \u003e\u003e\u003e eat((4l), (8l), (9l))\n (new ArrayList\u003cLong\u003e(Arrays.asList((long)12l, (long)1l)))\n \u003e\u003e\u003e eat((1l), (10l), (10l))\n (new ArrayList\u003cLong\u003e(Arrays.asList((long)11l, (long)0l)))\n \u003e\u003e\u003e eat((2l), (11l), (5l))\n (new ArrayList\u003cLong\u003e(Arrays.asList((long)7l, (long)0l)))\n Variables:\n @number : integer\n the number of carrots that you have eaten.\n @need : integer\n the number of carrots that you need to eat.\n @remaining : integer\n the number of remaining carrots thet exist in stock\n Constrain:\n * 0 \u003c\u003d number \u003c\u003d 1000\n * 0 \u003c\u003d need \u003c\u003d 1000\n * 0 \u003c\u003d remaining \u003c\u003d 1000","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You\u0027re a hungry rabbit, and you already have eaten a certain number of carrots,\n    // but now you need to eat more carrots to complete the day\u0027s meals.\n    // you should return an array array list of [ total number of eaten carrots after your meals,\n    // the number of carrots left after your meals ]\n    // if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    // Example:\n    // \u003e\u003e\u003e eat((5l), (6l), (10l))\n    // (new ArrayList\u003cLong\u003e(Arrays.asList((long)11l, (long)4l)))\n    // \u003e\u003e\u003e eat((4l), (8l), (9l))\n    // (new ArrayList\u003cLong\u003e(Arrays.asList((long)12l, (long)1l)))\n    // \u003e\u003e\u003e eat((1l), (10l), (10l))\n    // (new ArrayList\u003cLong\u003e(Arrays.asList((long)11l, (long)0l)))\n    // \u003e\u003e\u003e eat((2l), (11l), (5l))\n    // (new ArrayList\u003cLong\u003e(Arrays.asList((long)7l, (long)0l)))\n    // Variables:\n    // @number : integer\n    // the number of carrots that you have eaten.\n    // @need : integer\n    // the number of carrots that you need to eat.\n    // @remaining : integer\n    // the number of remaining carrots thet exist in stock\n    // Constrain:\n    // * 0 \u003c\u003d number \u003c\u003d 1000\n    // * 0 \u003c\u003d need \u003c\u003d 1000\n    // * 0 \u003c\u003d remaining \u003c\u003d 1000\n    // Have fun :)\n    public static ArrayList\u003cLong\u003e eat(long number, long need, long remaining) {\n"}