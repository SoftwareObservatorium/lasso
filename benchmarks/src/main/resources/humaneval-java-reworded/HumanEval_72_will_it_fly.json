{"id":"HumanEval_72_will_it_fly","lql":"Problem {\n  willItFly(java.util.ArrayList\u003cjava.lang.Long\u003e,long)-\u003eboolean\n}","sequences":[{"id":"Problem","statements":[{"operation":"willItFly","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 3l, (long) 2l, (long) 3l))","value":[3,2,3],"type":"java.util.ArrayList"},{"code":"9l","value":9,"type":"java.lang.Long"}],"expectedOutputs":[{"code":"true","value":true,"type":"java.lang.Boolean"}]}]},{"id":"Problem","statements":[{"operation":"willItFly","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l, (long) 2l))","value":[1,2],"type":"java.util.ArrayList"},{"code":"5l","value":5,"type":"java.lang.Long"}],"expectedOutputs":[{"code":"false","value":false,"type":"java.lang.Boolean"}]}]},{"id":"Problem","statements":[{"operation":"willItFly","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 3l))","value":[3],"type":"java.util.ArrayList"},{"code":"5l","value":5,"type":"java.lang.Long"}],"expectedOutputs":[{"code":"true","value":true,"type":"java.lang.Boolean"}]}]},{"id":"Problem","statements":[{"operation":"willItFly","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 3l, (long) 2l, (long) 3l))","value":[3,2,3],"type":"java.util.ArrayList"},{"code":"1l","value":1,"type":"java.lang.Long"}],"expectedOutputs":[{"code":"false","value":false,"type":"java.lang.Boolean"}]}]},{"id":"Problem","statements":[{"operation":"willItFly","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l, (long) 2l, (long) 3l))","value":[1,2,3],"type":"java.util.ArrayList"},{"code":"6l","value":6,"type":"java.lang.Long"}],"expectedOutputs":[{"code":"false","value":false,"type":"java.lang.Boolean"}]}]},{"id":"Problem","statements":[{"operation":"willItFly","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 5l))","value":[5],"type":"java.util.ArrayList"},{"code":"5l","value":5,"type":"java.lang.Long"}],"expectedOutputs":[{"code":"true","value":true,"type":"java.lang.Boolean"}]}]}],"description":" Write a function that returns true if the object q will fly, and false otherwise.\n The object q will fly if it\u0027s balanced (it is a palindromic array list) and the sum of its elements is less than or equal the maximum possible weight w.\n Example:\n \u003e\u003e\u003e willItFly((new ArrayList\u003cLong\u003e(Arrays.asList((long)1l, (long)2l))), (5l))\n (false)\n # 1+2 is less than the maximum possible weight, but it\u0027s unbalanced.\n \u003e\u003e\u003e willItFly((new ArrayList\u003cLong\u003e(Arrays.asList((long)3l, (long)2l, (long)3l))), (1l))\n (false)\n # it\u0027s balanced, but 3+2+3 is more than the maximum possible weight.\n \u003e\u003e\u003e willItFly((new ArrayList\u003cLong\u003e(Arrays.asList((long)3l, (long)2l, (long)3l))), (9l))\n (true)\n # 3+2+3 is less than the maximum possible weight, and it\u0027s balanced.\n \u003e\u003e\u003e willItFly((new ArrayList\u003cLong\u003e(Arrays.asList((long)3l))), (5l))\n (true)","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it\u0027s balanced (it is a palindromic array list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // \u003e\u003e\u003e willItFly((new ArrayList\u003cLong\u003e(Arrays.asList((long)1l, (long)2l))), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it\u0027s unbalanced.\n    // \u003e\u003e\u003e willItFly((new ArrayList\u003cLong\u003e(Arrays.asList((long)3l, (long)2l, (long)3l))), (1l))\n    // (false)\n    // # it\u0027s balanced, but 3+2+3 is more than the maximum possible weight.\n    // \u003e\u003e\u003e willItFly((new ArrayList\u003cLong\u003e(Arrays.asList((long)3l, (long)2l, (long)3l))), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it\u0027s balanced.\n    // \u003e\u003e\u003e willItFly((new ArrayList\u003cLong\u003e(Arrays.asList((long)3l))), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it\u0027s balanced.\n    public static boolean willItFly(ArrayList\u003cLong\u003e q, long w) {\n"}