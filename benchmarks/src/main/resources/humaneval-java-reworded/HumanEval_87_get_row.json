{"id":"HumanEval_87_get_row","lql":"Problem {\n  getRow(java.util.ArrayList\u003cjava.util.ArrayList\u003cjava.lang.Long\u003e\u003e,long)-\u003ejava.util.ArrayList\u003corg.javatuples.Pair\u003cjava.lang.Long, java.lang.Long\u003e\u003e\n}","sequences":[{"id":"Problem","statements":[{"operation":"getRow","inputs":[{"code":"new java.util.ArrayList\u003cjava.util.ArrayList\u003cjava.lang.Long\u003e\u003e(java.util.Arrays.asList((ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l, (long) 2l, (long) 3l, (long) 4l, (long) 5l, (long) 6l)), (ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l, (long) 2l, (long) 3l, (long) 4l, (long) 1l, (long) 6l)), (ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l, (long) 2l, (long) 3l, (long) 4l, (long) 5l, (long) 1l))))","value":[[1,2,3,4,5,6],[1,2,3,4,1,6],[1,2,3,4,5,1]],"type":"java.util.ArrayList"},{"code":"1l","value":1,"type":"java.lang.Long"}],"expectedOutputs":[{"code":"new java.util.ArrayList\u003corg.javatuples.Pair\u003cjava.lang.Long, java.lang.Long\u003e\u003e(java.util.Arrays.asList((Pair\u003cLong, Long\u003e) org.javatuples.Pair.with(0l, 0l), (Pair\u003cLong, Long\u003e) org.javatuples.Pair.with(1l, 4l), (Pair\u003cLong, Long\u003e) org.javatuples.Pair.with(1l, 0l), (Pair\u003cLong, Long\u003e) org.javatuples.Pair.with(2l, 5l), (Pair\u003cLong, Long\u003e) org.javatuples.Pair.with(2l, 0l)))","value":[{"val0":0,"val1":0,"valueArray":[0,0],"valueList":[0,0]},{"val0":1,"val1":4,"valueArray":[1,4],"valueList":[1,4]},{"val0":1,"val1":0,"valueArray":[1,0],"valueList":[1,0]},{"val0":2,"val1":5,"valueArray":[2,5],"valueList":[2,5]},{"val0":2,"val1":0,"valueArray":[2,0],"valueList":[2,0]}],"type":"java.util.ArrayList"}]}]},{"id":"Problem","statements":[{"operation":"getRow","inputs":[{"code":"new java.util.ArrayList\u003cjava.util.ArrayList\u003cjava.lang.Long\u003e\u003e(java.util.Arrays.asList((ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l, (long) 2l, (long) 3l, (long) 4l, (long) 5l, (long) 6l)), (ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l, (long) 2l, (long) 3l, (long) 4l, (long) 5l, (long) 6l)), (ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l, (long) 2l, (long) 3l, (long) 4l, (long) 5l, (long) 6l)), (ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l, (long) 2l, (long) 3l, (long) 4l, (long) 5l, (long) 6l)), (ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l, (long) 2l, (long) 3l, (long) 4l, (long) 5l, (long) 6l)), (ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l, (long) 2l, (long) 3l, (long) 4l, (long) 5l, (long) 6l))))","value":[[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6]],"type":"java.util.ArrayList"},{"code":"2l","value":2,"type":"java.lang.Long"}],"expectedOutputs":[{"code":"new java.util.ArrayList\u003corg.javatuples.Pair\u003cjava.lang.Long, java.lang.Long\u003e\u003e(java.util.Arrays.asList((Pair\u003cLong, Long\u003e) org.javatuples.Pair.with(0l, 1l), (Pair\u003cLong, Long\u003e) org.javatuples.Pair.with(1l, 1l), (Pair\u003cLong, Long\u003e) org.javatuples.Pair.with(2l, 1l), (Pair\u003cLong, Long\u003e) org.javatuples.Pair.with(3l, 1l), (Pair\u003cLong, Long\u003e) org.javatuples.Pair.with(4l, 1l), (Pair\u003cLong, Long\u003e) org.javatuples.Pair.with(5l, 1l)))","value":[{"val0":0,"val1":1,"valueArray":[0,1],"valueList":[0,1]},{"val0":1,"val1":1,"valueArray":[1,1],"valueList":[1,1]},{"val0":2,"val1":1,"valueArray":[2,1],"valueList":[2,1]},{"val0":3,"val1":1,"valueArray":[3,1],"valueList":[3,1]},{"val0":4,"val1":1,"valueArray":[4,1],"valueList":[4,1]},{"val0":5,"val1":1,"valueArray":[5,1],"valueList":[5,1]}],"type":"java.util.ArrayList"}]}]},{"id":"Problem","statements":[{"operation":"getRow","inputs":[{"code":"new java.util.ArrayList\u003cjava.util.ArrayList\u003cjava.lang.Long\u003e\u003e(java.util.Arrays.asList((ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l, (long) 2l, (long) 3l, (long) 4l, (long) 5l, (long) 6l)), (ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l, (long) 2l, (long) 3l, (long) 4l, (long) 5l, (long) 6l)), (ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l, (long) 1l, (long) 3l, (long) 4l, (long) 5l, (long) 6l)), (ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l, (long) 2l, (long) 1l, (long) 4l, (long) 5l, (long) 6l)), (ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l, (long) 2l, (long) 3l, (long) 1l, (long) 5l, (long) 6l)), (ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l, (long) 2l, (long) 3l, (long) 4l, (long) 1l, (long) 6l)), (ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l, (long) 2l, (long) 3l, (long) 4l, (long) 5l, (long) 1l))))","value":[[1,2,3,4,5,6],[1,2,3,4,5,6],[1,1,3,4,5,6],[1,2,1,4,5,6],[1,2,3,1,5,6],[1,2,3,4,1,6],[1,2,3,4,5,1]],"type":"java.util.ArrayList"},{"code":"1l","value":1,"type":"java.lang.Long"}],"expectedOutputs":[{"code":"new java.util.ArrayList\u003corg.javatuples.Pair\u003cjava.lang.Long, java.lang.Long\u003e\u003e(java.util.Arrays.asList((Pair\u003cLong, Long\u003e) org.javatuples.Pair.with(0l, 0l), (Pair\u003cLong, Long\u003e) org.javatuples.Pair.with(1l, 0l), (Pair\u003cLong, Long\u003e) org.javatuples.Pair.with(2l, 1l), (Pair\u003cLong, Long\u003e) org.javatuples.Pair.with(2l, 0l), (Pair\u003cLong, Long\u003e) org.javatuples.Pair.with(3l, 2l), (Pair\u003cLong, Long\u003e) org.javatuples.Pair.with(3l, 0l), (Pair\u003cLong, Long\u003e) org.javatuples.Pair.with(4l, 3l), (Pair\u003cLong, Long\u003e) org.javatuples.Pair.with(4l, 0l), (Pair\u003cLong, Long\u003e) org.javatuples.Pair.with(5l, 4l), (Pair\u003cLong, Long\u003e) org.javatuples.Pair.with(5l, 0l), (Pair\u003cLong, Long\u003e) org.javatuples.Pair.with(6l, 5l), (Pair\u003cLong, Long\u003e) org.javatuples.Pair.with(6l, 0l)))","value":[{"val0":0,"val1":0,"valueArray":[0,0],"valueList":[0,0]},{"val0":1,"val1":0,"valueArray":[1,0],"valueList":[1,0]},{"val0":2,"val1":1,"valueArray":[2,1],"valueList":[2,1]},{"val0":2,"val1":0,"valueArray":[2,0],"valueList":[2,0]},{"val0":3,"val1":2,"valueArray":[3,2],"valueList":[3,2]},{"val0":3,"val1":0,"valueArray":[3,0],"valueList":[3,0]},{"val0":4,"val1":3,"valueArray":[4,3],"valueList":[4,3]},{"val0":4,"val1":0,"valueArray":[4,0],"valueList":[4,0]},{"val0":5,"val1":4,"valueArray":[5,4],"valueList":[5,4]},{"val0":5,"val1":0,"valueArray":[5,0],"valueList":[5,0]},{"val0":6,"val1":5,"valueArray":[6,5],"valueList":[6,5]},{"val0":6,"val1":0,"valueArray":[6,0],"valueList":[6,0]}],"type":"java.util.ArrayList"}]}]},{"id":"Problem","statements":[{"operation":"getRow","inputs":[{"code":"new java.util.ArrayList\u003cjava.util.ArrayList\u003cjava.lang.Long\u003e\u003e(java.util.Arrays.asList())","value":[],"type":"java.util.ArrayList"},{"code":"1l","value":1,"type":"java.lang.Long"}],"expectedOutputs":[{"code":"new java.util.ArrayList\u003corg.javatuples.Pair\u003cjava.lang.Long, java.lang.Long\u003e\u003e(java.util.Arrays.asList())","value":[],"type":"java.util.ArrayList"}]}]},{"id":"Problem","statements":[{"operation":"getRow","inputs":[{"code":"new java.util.ArrayList\u003cjava.util.ArrayList\u003cjava.lang.Long\u003e\u003e(java.util.Arrays.asList((ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l))))","value":[[1]],"type":"java.util.ArrayList"},{"code":"2l","value":2,"type":"java.lang.Long"}],"expectedOutputs":[{"code":"new java.util.ArrayList\u003corg.javatuples.Pair\u003cjava.lang.Long, java.lang.Long\u003e\u003e(java.util.Arrays.asList())","value":[],"type":"java.util.ArrayList"}]}]},{"id":"Problem","statements":[{"operation":"getRow","inputs":[{"code":"new java.util.ArrayList\u003cjava.util.ArrayList\u003cjava.lang.Long\u003e\u003e(java.util.Arrays.asList((ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList()), (ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l)), (ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l, (long) 2l, (long) 3l))))","value":[[],[1],[1,2,3]],"type":"java.util.ArrayList"},{"code":"3l","value":3,"type":"java.lang.Long"}],"expectedOutputs":[{"code":"new java.util.ArrayList\u003corg.javatuples.Pair\u003cjava.lang.Long, java.lang.Long\u003e\u003e(java.util.Arrays.asList((Pair\u003cLong, Long\u003e) org.javatuples.Pair.with(2l, 2l)))","value":[{"val0":2,"val1":2,"valueArray":[2,2],"valueList":[2,2]}],"type":"java.util.ArrayList"}]}]}],"description":" You are given a 2 dimensional data, as a nested array lists,\n which is similar to matrix, however, unlike matrices,\n each row may contain a different number of columns.\n Given lst, and integer x, find integers x in the array list,\n and return array list of pairs, [(x1, y1), (x2, y2) ...] such that\n each pair is a coordinate - (row, columns), starting with 0.\n Sort coordinates initially by rows in ascending order.\n Also, sort coordinates of the row by columns in descending order.\n Examples:\n \u003e\u003e\u003e getRow((new ArrayList\u003cArrayList\u003cLong\u003e\u003e(Arrays.asList((ArrayList\u003cLong\u003e)new ArrayList\u003cLong\u003e(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList\u003cLong\u003e)new ArrayList\u003cLong\u003e(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)1l, (long)6l)), (ArrayList\u003cLong\u003e)new ArrayList\u003cLong\u003e(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)1l))))), (1l))\n (new ArrayList\u003cPair\u003cLong, Long\u003e\u003e(Arrays.asList((Pair\u003cLong, Long\u003e)Pair.with(0l, 0l), (Pair\u003cLong, Long\u003e)Pair.with(1l, 4l), (Pair\u003cLong, Long\u003e)Pair.with(1l, 0l), (Pair\u003cLong, Long\u003e)Pair.with(2l, 5l), (Pair\u003cLong, Long\u003e)Pair.with(2l, 0l))))\n \u003e\u003e\u003e getRow((new ArrayList\u003cArrayList\u003cLong\u003e\u003e(Arrays.asList())), (1l))\n (new ArrayList\u003cPair\u003cLong, Long\u003e\u003e(Arrays.asList()))\n \u003e\u003e\u003e getRow((new ArrayList\u003cArrayList\u003cLong\u003e\u003e(Arrays.asList((ArrayList\u003cLong\u003e)new ArrayList\u003cLong\u003e(Arrays.asList()), (ArrayList\u003cLong\u003e)new ArrayList\u003cLong\u003e(Arrays.asList((long)1l)), (ArrayList\u003cLong\u003e)new ArrayList\u003cLong\u003e(Arrays.asList((long)1l, (long)2l, (long)3l))))), (3l))"}