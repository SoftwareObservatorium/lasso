{"id":"HumanEval_119_match_parens","lql":"Problem {\n  matchParens(java.util.ArrayList\u003cjava.lang.String\u003e)-\u003ejava.lang.String\n}","sequences":[{"id":"Problem","statements":[{"operation":"matchParens","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.String\u003e(java.util.Arrays.asList((String) \"()(\", (String) \")\"))","value":["()(",")"],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"\"Yes\"","value":"Yes","type":"java.lang.String"}]}]},{"id":"Problem","statements":[{"operation":"matchParens","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.String\u003e(java.util.Arrays.asList((String) \")\", (String) \")\"))","value":[")",")"],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"\"No\"","value":"No","type":"java.lang.String"}]}]},{"id":"Problem","statements":[{"operation":"matchParens","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.String\u003e(java.util.Arrays.asList((String) \"(()(())\", (String) \"())())\"))","value":["(()(())","())())"],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"\"No\"","value":"No","type":"java.lang.String"}]}]},{"id":"Problem","statements":[{"operation":"matchParens","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.String\u003e(java.util.Arrays.asList((String) \")())\", (String) \"(()()(\"))","value":[")())","(()()("],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"\"Yes\"","value":"Yes","type":"java.lang.String"}]}]},{"id":"Problem","statements":[{"operation":"matchParens","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.String\u003e(java.util.Arrays.asList((String) \"(())))\", (String) \"(()())((\"))","value":["(())))","(()())(("],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"\"Yes\"","value":"Yes","type":"java.lang.String"}]}]},{"id":"Problem","statements":[{"operation":"matchParens","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.String\u003e(java.util.Arrays.asList((String) \"()\", (String) \"())\"))","value":["()","())"],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"\"No\"","value":"No","type":"java.lang.String"}]}]},{"id":"Problem","statements":[{"operation":"matchParens","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.String\u003e(java.util.Arrays.asList((String) \"(()(\", (String) \"()))()\"))","value":["(()(","()))()"],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"\"Yes\"","value":"Yes","type":"java.lang.String"}]}]},{"id":"Problem","statements":[{"operation":"matchParens","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.String\u003e(java.util.Arrays.asList((String) \"((((\", (String) \"((())\"))","value":["((((","((())"],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"\"No\"","value":"No","type":"java.lang.String"}]}]},{"id":"Problem","statements":[{"operation":"matchParens","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.String\u003e(java.util.Arrays.asList((String) \")(()\", (String) \"(()(\"))","value":[")(()","(()("],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"\"No\"","value":"No","type":"java.lang.String"}]}]},{"id":"Problem","statements":[{"operation":"matchParens","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.String\u003e(java.util.Arrays.asList((String) \")(\", (String) \")(\"))","value":[")(",")("],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"\"No\"","value":"No","type":"java.lang.String"}]}]},{"id":"Problem","statements":[{"operation":"matchParens","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.String\u003e(java.util.Arrays.asList((String) \"(\", (String) \")\"))","value":["(",")"],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"\"Yes\"","value":"Yes","type":"java.lang.String"}]}]},{"id":"Problem","statements":[{"operation":"matchParens","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.String\u003e(java.util.Arrays.asList((String) \")\", (String) \"(\"))","value":[")","("],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"\"Yes\"","value":"Yes","type":"java.lang.String"}]}]}],"description":" You are given an array array list of two strings, both strings consist of open\n parentheses \u0027(\u0027 or close parentheses \u0027)\u0027 only.\n Your job is to check if it is possible to concatenate the two strings in\n some order, that the resulting string will be good.\n A string S is considered to be good if and only if all parentheses in S\n are balanced. For example: the string \u0027(())()\u0027 is good, while the string\n \u0027())\u0027 is not.\n Return \u0027Yes\u0027 if there\u0027s a way to make a good string, and return \u0027No\u0027 otherwise.\n Examples:\n \u003e\u003e\u003e matchParens((new ArrayList\u003cString\u003e(Arrays.asList((String)\"()(\", (String)\")\"))))\n (\"Yes\")\n \u003e\u003e\u003e matchParens((new ArrayList\u003cString\u003e(Arrays.asList((String)\")\", (String)\")\"))))"}