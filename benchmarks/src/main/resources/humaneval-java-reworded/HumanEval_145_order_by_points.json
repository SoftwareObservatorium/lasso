{"id":"HumanEval_145_order_by_points","lql":"Problem {\n  orderByPoints(java.util.ArrayList\u003cjava.lang.Long\u003e)-\u003ejava.util.ArrayList\u003cjava.lang.Long\u003e\n}","sequences":[{"id":"Problem","statements":[{"operation":"orderByPoints","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l, (long) 11l, (long) -1l, (long) -11l, (long) -12l))","value":[1,11,-1,-11,-12],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) -1l, (long) -11l, (long) 1l, (long) -12l, (long) 11l))","value":[-1,-11,1,-12,11],"type":"java.util.ArrayList"}]}]},{"id":"Problem","statements":[{"operation":"orderByPoints","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1234l, (long) 423l, (long) 463l, (long) 145l, (long) 2l, (long) 423l, (long) 423l, (long) 53l, (long) 6l, (long) 37l, (long) 3457l, (long) 3l, (long) 56l, (long) 0l, (long) 46l))","value":[1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 0l, (long) 2l, (long) 3l, (long) 6l, (long) 53l, (long) 423l, (long) 423l, (long) 423l, (long) 1234l, (long) 145l, (long) 37l, (long) 46l, (long) 56l, (long) 463l, (long) 3457l))","value":[0,2,3,6,53,423,423,423,1234,145,37,46,56,463,3457],"type":"java.util.ArrayList"}]}]},{"id":"Problem","statements":[{"operation":"orderByPoints","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList())","value":[],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList())","value":[],"type":"java.util.ArrayList"}]}]},{"id":"Problem","statements":[{"operation":"orderByPoints","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l, (long) -11l, (long) -32l, (long) 43l, (long) 54l, (long) -98l, (long) 2l, (long) -3l))","value":[1,-11,-32,43,54,-98,2,-3],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) -3l, (long) -32l, (long) -98l, (long) -11l, (long) 1l, (long) 2l, (long) 43l, (long) 54l))","value":[-3,-32,-98,-11,1,2,43,54],"type":"java.util.ArrayList"}]}]},{"id":"Problem","statements":[{"operation":"orderByPoints","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l, (long) 2l, (long) 3l, (long) 4l, (long) 5l, (long) 6l, (long) 7l, (long) 8l, (long) 9l, (long) 10l, (long) 11l))","value":[1,2,3,4,5,6,7,8,9,10,11],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l, (long) 10l, (long) 2l, (long) 11l, (long) 3l, (long) 4l, (long) 5l, (long) 6l, (long) 7l, (long) 8l, (long) 9l))","value":[1,10,2,11,3,4,5,6,7,8,9],"type":"java.util.ArrayList"}]}]},{"id":"Problem","statements":[{"operation":"orderByPoints","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 0l, (long) 6l, (long) 6l, (long) -76l, (long) -21l, (long) 23l, (long) 4l))","value":[0,6,6,-76,-21,23,4],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) -76l, (long) -21l, (long) 0l, (long) 4l, (long) 23l, (long) 6l, (long) 6l))","value":[-76,-21,0,4,23,6,6],"type":"java.util.ArrayList"}]}]}],"description":" Write a function which sorts the given array list of integers\n in ascending order according to the sum of their digits.\n Note: if there are several items with similar sum of their digits,\n order them based on their index in original array list.\n For example:\n \u003e\u003e\u003e orderByPoints((new ArrayList\u003cLong\u003e(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n (new ArrayList\u003cLong\u003e(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))\n \u003e\u003e\u003e orderByPoints((new ArrayList\u003cLong\u003e(Arrays.asList())))","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which sorts the given array list of integers\n    // in ascending order according to the sum of their digits.\n    // Note: if there are several items with similar sum of their digits,\n    // order them based on their index in original array list.\n    // For example:\n    // \u003e\u003e\u003e orderByPoints((new ArrayList\u003cLong\u003e(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n    // (new ArrayList\u003cLong\u003e(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // \u003e\u003e\u003e orderByPoints((new ArrayList\u003cLong\u003e(Arrays.asList())))\n    // (new ArrayList\u003cLong\u003e(Arrays.asList()))\n    public static ArrayList\u003cLong\u003e orderByPoints(ArrayList\u003cLong\u003e nums) {\n"}