{"id":"HumanEval_148_bf","lql":"Problem {\n  bf(java.lang.String,java.lang.String)-\u003ejava.util.ArrayList\u003cjava.lang.String\u003e\n}","sequences":[{"id":"Problem","statements":[{"operation":"bf","inputs":[{"code":"\"Jupiter\"","value":"Jupiter","type":"java.lang.String"},{"code":"\"Neptune\"","value":"Neptune","type":"java.lang.String"}],"expectedOutputs":[{"code":"new java.util.ArrayList\u003cjava.lang.String\u003e(java.util.Arrays.asList((String) \"Saturn\", (String) \"Uranus\"))","value":["Saturn","Uranus"],"type":"java.util.ArrayList"}]}]},{"id":"Problem","statements":[{"operation":"bf","inputs":[{"code":"\"Earth\"","value":"Earth","type":"java.lang.String"},{"code":"\"Mercury\"","value":"Mercury","type":"java.lang.String"}],"expectedOutputs":[{"code":"new java.util.ArrayList\u003cjava.lang.String\u003e(java.util.Arrays.asList((String) \"Venus\"))","value":["Venus"],"type":"java.util.ArrayList"}]}]},{"id":"Problem","statements":[{"operation":"bf","inputs":[{"code":"\"Mercury\"","value":"Mercury","type":"java.lang.String"},{"code":"\"Uranus\"","value":"Uranus","type":"java.lang.String"}],"expectedOutputs":[{"code":"new java.util.ArrayList\u003cjava.lang.String\u003e(java.util.Arrays.asList((String) \"Venus\", (String) \"Earth\", (String) \"Mars\", (String) \"Jupiter\", (String) \"Saturn\"))","value":["Venus","Earth","Mars","Jupiter","Saturn"],"type":"java.util.ArrayList"}]}]},{"id":"Problem","statements":[{"operation":"bf","inputs":[{"code":"\"Neptune\"","value":"Neptune","type":"java.lang.String"},{"code":"\"Venus\"","value":"Venus","type":"java.lang.String"}],"expectedOutputs":[{"code":"new java.util.ArrayList\u003cjava.lang.String\u003e(java.util.Arrays.asList((String) \"Earth\", (String) \"Mars\", (String) \"Jupiter\", (String) \"Saturn\", (String) \"Uranus\"))","value":["Earth","Mars","Jupiter","Saturn","Uranus"],"type":"java.util.ArrayList"}]}]},{"id":"Problem","statements":[{"operation":"bf","inputs":[{"code":"\"Earth\"","value":"Earth","type":"java.lang.String"},{"code":"\"Earth\"","value":"Earth","type":"java.lang.String"}],"expectedOutputs":[{"code":"new java.util.ArrayList\u003cjava.lang.String\u003e(java.util.Arrays.asList())","value":[],"type":"java.util.ArrayList"}]}]},{"id":"Problem","statements":[{"operation":"bf","inputs":[{"code":"\"Mars\"","value":"Mars","type":"java.lang.String"},{"code":"\"Earth\"","value":"Earth","type":"java.lang.String"}],"expectedOutputs":[{"code":"new java.util.ArrayList\u003cjava.lang.String\u003e(java.util.Arrays.asList())","value":[],"type":"java.util.ArrayList"}]}]},{"id":"Problem","statements":[{"operation":"bf","inputs":[{"code":"\"Jupiter\"","value":"Jupiter","type":"java.lang.String"},{"code":"\"Makemake\"","value":"Makemake","type":"java.lang.String"}],"expectedOutputs":[{"code":"new java.util.ArrayList\u003cjava.lang.String\u003e(java.util.Arrays.asList())","value":[],"type":"java.util.ArrayList"}]}]}],"description":" There are eight planets in our solar system: the closerst to the Sun \n is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n Uranus, Neptune.\n Write a function that takes two planet names as strings planet1 and planet2. \n The function should return a pair containing all planets whose orbits are \n located between the orbit of planet1 and the orbit of planet2, sorted by \n the proximity to the sun. \n The function should return an empty pair if planet1 or planet2\n are not correct planet names. \n Examples\n \u003e\u003e\u003e bf((\"Jupiter\"), (\"Neptune\"))\n (new ArrayList\u003cString\u003e(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n \u003e\u003e\u003e bf((\"Earth\"), (\"Mercury\"))\n (ArrayList\u003cString\u003e(\"Venus\"))\n \u003e\u003e\u003e bf((\"Mercury\"), (\"Uranus\"))"}