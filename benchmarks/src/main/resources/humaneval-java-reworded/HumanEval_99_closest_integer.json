{"id":"HumanEval_99_closest_integer","lql":"Problem {\n  closestInteger(java.lang.String)-\u003elong\n}","sequences":[{"id":"Problem","statements":[{"operation":"closestInteger","inputs":[{"code":"\"10\"","value":"10","type":"java.lang.String"}],"expectedOutputs":[{"code":"10l","value":10,"type":"java.lang.Long"}]}]},{"id":"Problem","statements":[{"operation":"closestInteger","inputs":[{"code":"\"14.5\"","value":"14.5","type":"java.lang.String"}],"expectedOutputs":[{"code":"15l","value":15,"type":"java.lang.Long"}]}]},{"id":"Problem","statements":[{"operation":"closestInteger","inputs":[{"code":"\"-15.5\"","value":"-15.5","type":"java.lang.String"}],"expectedOutputs":[{"code":"-16l","value":-16,"type":"java.lang.Long"}]}]},{"id":"Problem","statements":[{"operation":"closestInteger","inputs":[{"code":"\"15.3\"","value":"15.3","type":"java.lang.String"}],"expectedOutputs":[{"code":"15l","value":15,"type":"java.lang.Long"}]}]},{"id":"Problem","statements":[{"operation":"closestInteger","inputs":[{"code":"\"0\"","value":"0","type":"java.lang.String"}],"expectedOutputs":[{"code":"0l","value":0,"type":"java.lang.Long"}]}]}],"description":" Create a function that takes a value (string) representing a number\n and returns the closest integer to it. If the number is equidistant\n from two integers, round it away from zero.\n Examples\n \u003e\u003e\u003e closestInteger((\"10\"))\n (10l)\n \u003e\u003e\u003e closestInteger((\"15.3\"))\n (15l)\n Note:\n Rounding away from zero means that if the given number is equidistant\n from two integers, the one you should return is the one that is the\n farthest from zero. For example closest_integer(\"14.5\") should"}