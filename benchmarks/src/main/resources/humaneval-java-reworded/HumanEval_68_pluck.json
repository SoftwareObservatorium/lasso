{"id":"HumanEval_68_pluck","lql":"Problem {\n  pluck(java.util.ArrayList\u003cjava.lang.Long\u003e)-\u003ejava.util.ArrayList\u003cjava.lang.Long\u003e\n}","sequences":[{"id":"Problem","statements":[{"operation":"pluck","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 4l, (long) 2l, (long) 3l))","value":[4,2,3],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 2l, (long) 1l))","value":[2,1],"type":"java.util.ArrayList"}]}]},{"id":"Problem","statements":[{"operation":"pluck","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l, (long) 2l, (long) 3l))","value":[1,2,3],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 2l, (long) 1l))","value":[2,1],"type":"java.util.ArrayList"}]}]},{"id":"Problem","statements":[{"operation":"pluck","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList())","value":[],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList())","value":[],"type":"java.util.ArrayList"}]}]},{"id":"Problem","statements":[{"operation":"pluck","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 5l, (long) 0l, (long) 3l, (long) 0l, (long) 4l, (long) 2l))","value":[5,0,3,0,4,2],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 0l, (long) 1l))","value":[0,1],"type":"java.util.ArrayList"}]}]},{"id":"Problem","statements":[{"operation":"pluck","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l, (long) 2l, (long) 3l, (long) 0l, (long) 5l, (long) 3l))","value":[1,2,3,0,5,3],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 0l, (long) 3l))","value":[0,3],"type":"java.util.ArrayList"}]}]},{"id":"Problem","statements":[{"operation":"pluck","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 5l, (long) 4l, (long) 8l, (long) 4l, (long) 8l))","value":[5,4,8,4,8],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 4l, (long) 1l))","value":[4,1],"type":"java.util.ArrayList"}]}]},{"id":"Problem","statements":[{"operation":"pluck","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 7l, (long) 6l, (long) 7l, (long) 1l))","value":[7,6,7,1],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 6l, (long) 1l))","value":[6,1],"type":"java.util.ArrayList"}]}]},{"id":"Problem","statements":[{"operation":"pluck","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 7l, (long) 9l, (long) 7l, (long) 1l))","value":[7,9,7,1],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList())","value":[],"type":"java.util.ArrayList"}]}]}],"description":" \"Given an array array list representing a branch of a tree that has non-negative integer nodes\n your task is to pluck one of the nodes and return it.\n The plucked node should be the node with the smallest even value.\n If multiple nodes with the same smallest even value are found return the node that has smallest index.\n The plucked node should be returned in an array array list, [ smalest_value, its index ],\n If there are no even values or the given array array list is empty, return [].\n Example 1:\n \u003e\u003e\u003e pluck((new ArrayList\u003cLong\u003e(Arrays.asList((long)4l, (long)2l, (long)3l))))\n (new ArrayList\u003cLong\u003e(Arrays.asList((long)2l, (long)1l)))\n Explanation: 2 has the smallest even value, and 2 has the smallest index.\n Example 2:\n \u003e\u003e\u003e pluck((new ArrayList\u003cLong\u003e(Arrays.asList((long)1l, (long)2l, (long)3l))))\n (new ArrayList\u003cLong\u003e(Arrays.asList((long)2l, (long)1l)))\n Explanation: 2 has the smallest even value, and 2 has the smallest index.\n Example 3:\n \u003e\u003e\u003e pluck((new ArrayList\u003cLong\u003e(Arrays.asList())))\n (new ArrayList\u003cLong\u003e(Arrays.asList()))\n Example 4:\n \u003e\u003e\u003e pluck((new ArrayList\u003cLong\u003e(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l, (long)4l, (long)2l))))\n (new ArrayList\u003cLong\u003e(Arrays.asList((long)0l, (long)1l)))\n Explanation: 0 is the smallest value, but  there are two zeros,\n so we will choose the first zero, which has the smallest index.\n Constraints:\n * 1 \u003c\u003d nodes.length \u003c\u003d 10000"}