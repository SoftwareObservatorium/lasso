{"id":"HumanEval_126_is_sorted","lql":"Problem {\n  isSorted(java.util.ArrayList\u003cjava.lang.Long\u003e)-\u003eboolean\n}","sequences":[{"id":"Problem","statements":[{"operation":"isSorted","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 5l))","value":[5],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"true","value":true,"type":"java.lang.Boolean"}]}]},{"id":"Problem","statements":[{"operation":"isSorted","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l, (long) 2l, (long) 3l, (long) 4l, (long) 5l))","value":[1,2,3,4,5],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"true","value":true,"type":"java.lang.Boolean"}]}]},{"id":"Problem","statements":[{"operation":"isSorted","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l, (long) 3l, (long) 2l, (long) 4l, (long) 5l))","value":[1,3,2,4,5],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"false","value":false,"type":"java.lang.Boolean"}]}]},{"id":"Problem","statements":[{"operation":"isSorted","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l, (long) 2l, (long) 3l, (long) 4l, (long) 5l, (long) 6l))","value":[1,2,3,4,5,6],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"true","value":true,"type":"java.lang.Boolean"}]}]},{"id":"Problem","statements":[{"operation":"isSorted","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l, (long) 2l, (long) 3l, (long) 4l, (long) 5l, (long) 6l, (long) 7l))","value":[1,2,3,4,5,6,7],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"true","value":true,"type":"java.lang.Boolean"}]}]},{"id":"Problem","statements":[{"operation":"isSorted","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l, (long) 3l, (long) 2l, (long) 4l, (long) 5l, (long) 6l, (long) 7l))","value":[1,3,2,4,5,6,7],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"false","value":false,"type":"java.lang.Boolean"}]}]},{"id":"Problem","statements":[{"operation":"isSorted","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList())","value":[],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"true","value":true,"type":"java.lang.Boolean"}]}]},{"id":"Problem","statements":[{"operation":"isSorted","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l))","value":[1],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"true","value":true,"type":"java.lang.Boolean"}]}]},{"id":"Problem","statements":[{"operation":"isSorted","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 3l, (long) 2l, (long) 1l))","value":[3,2,1],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"false","value":false,"type":"java.lang.Boolean"}]}]},{"id":"Problem","statements":[{"operation":"isSorted","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l, (long) 2l, (long) 2l, (long) 2l, (long) 3l, (long) 4l))","value":[1,2,2,2,3,4],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"false","value":false,"type":"java.lang.Boolean"}]}]},{"id":"Problem","statements":[{"operation":"isSorted","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l, (long) 2l, (long) 3l, (long) 3l, (long) 3l, (long) 4l))","value":[1,2,3,3,3,4],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"false","value":false,"type":"java.lang.Boolean"}]}]},{"id":"Problem","statements":[{"operation":"isSorted","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l, (long) 2l, (long) 2l, (long) 3l, (long) 3l, (long) 4l))","value":[1,2,2,3,3,4],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"true","value":true,"type":"java.lang.Boolean"}]}]},{"id":"Problem","statements":[{"operation":"isSorted","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l, (long) 2l, (long) 3l, (long) 4l))","value":[1,2,3,4],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"true","value":true,"type":"java.lang.Boolean"}]}]}],"description":" Given an array array list of numbers, return whether or not they are sorted\n in ascending order. If array list has more than 1 duplicate of the same\n number, return false. Assume no negative numbers and only integers.\n Examples\n \u003e\u003e\u003e isSorted((new ArrayList\u003cLong\u003e(Arrays.asList((long)5l))))\n (true)\n \u003e\u003e\u003e isSorted((new ArrayList\u003cLong\u003e(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\n (true)\n \u003e\u003e\u003e isSorted((new ArrayList\u003cLong\u003e(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n (false)\n \u003e\u003e\u003e isSorted((new ArrayList\u003cLong\u003e(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n (true)\n \u003e\u003e\u003e isSorted((new ArrayList\u003cLong\u003e(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l))))\n (true)\n \u003e\u003e\u003e isSorted((new ArrayList\u003cLong\u003e(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l))))\n (false)\n \u003e\u003e\u003e isSorted((new ArrayList\u003cLong\u003e(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n (true)\n \u003e\u003e\u003e isSorted((new ArrayList\u003cLong\u003e(Arrays.asList((long)1l, (long)2l, (long)2l, (long)2l, (long)3l, (long)4l))))"}