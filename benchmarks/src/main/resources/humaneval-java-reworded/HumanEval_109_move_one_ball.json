{"id":"HumanEval_109_move_one_ball","lql":"Problem {\n  moveOneBall(java.util.ArrayList\u003cjava.lang.Long\u003e)-\u003eboolean\n}","sequences":[{"id":"Problem","statements":[{"operation":"moveOneBall","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 3l, (long) 4l, (long) 5l, (long) 1l, (long) 2l))","value":[3,4,5,1,2],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"true","value":true,"type":"java.lang.Boolean"}]}]},{"id":"Problem","statements":[{"operation":"moveOneBall","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 3l, (long) 5l, (long) 10l, (long) 1l, (long) 2l))","value":[3,5,10,1,2],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"true","value":true,"type":"java.lang.Boolean"}]}]},{"id":"Problem","statements":[{"operation":"moveOneBall","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 4l, (long) 3l, (long) 1l, (long) 2l))","value":[4,3,1,2],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"false","value":false,"type":"java.lang.Boolean"}]}]},{"id":"Problem","statements":[{"operation":"moveOneBall","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 3l, (long) 5l, (long) 4l, (long) 1l, (long) 2l))","value":[3,5,4,1,2],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"false","value":false,"type":"java.lang.Boolean"}]}]},{"id":"Problem","statements":[{"operation":"moveOneBall","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList())","value":[],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"true","value":true,"type":"java.lang.Boolean"}]}]}],"description":" We have an array array list \u0027arr\u0027 of N integers arr[1], arr[2], ..., arr[N].The\n numbers in the array array list will be randomly ordered. Your task is to determine if\n it is possible to get an array array list sorted in non-decreasing order by performing \n the following operation on the given array array list:\n You are allowed to perform right shift operation any number of times.\n One right shift operation means shifting all elements of the array array list by one\n position in the right direction. The last element of the array array list will be moved to\n the starting position in the array array list i.e. 0th index. \n If it is possible to obtain the sorted array array list by performing the above operation\n then return true else return false.\n If the given array array list is empty then return true.\n Note: The given array list is guaranteed to have unique elements.\n For Example:\n \u003e\u003e\u003e moveOneBall((new ArrayList\u003cLong\u003e(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\n (true)\n Explanation: By performin 2 right shift operations, non-decreasing order can\n be achieved for the given array array list.\n \u003e\u003e\u003e moveOneBall((new ArrayList\u003cLong\u003e(Arrays.asList((long)3l, (long)5l, (long)4l, (long)1l, (long)2l))))\n (false)\n Explanation:It is not possible to get non-decreasing order for the given"}