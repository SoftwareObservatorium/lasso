{"id":"HumanEval_135_can_arrange","lql":"Problem {\n  canArrange(java.util.ArrayList\u003cjava.lang.Long\u003e)-\u003elong\n}","sequences":[{"id":"Problem","statements":[{"operation":"canArrange","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l, (long) 2l, (long) 4l, (long) 3l, (long) 5l))","value":[1,2,4,3,5],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"3l","value":3,"type":"java.lang.Long"}]}]},{"id":"Problem","statements":[{"operation":"canArrange","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l, (long) 2l, (long) 4l, (long) 5l))","value":[1,2,4,5],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"-1l","value":-1,"type":"java.lang.Long"}]}]},{"id":"Problem","statements":[{"operation":"canArrange","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l, (long) 4l, (long) 2l, (long) 5l, (long) 6l, (long) 7l, (long) 8l, (long) 9l, (long) 10l))","value":[1,4,2,5,6,7,8,9,10],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"2l","value":2,"type":"java.lang.Long"}]}]},{"id":"Problem","statements":[{"operation":"canArrange","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 4l, (long) 8l, (long) 5l, (long) 7l, (long) 3l))","value":[4,8,5,7,3],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"4l","value":4,"type":"java.lang.Long"}]}]},{"id":"Problem","statements":[{"operation":"canArrange","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList())","value":[],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"-1l","value":-1,"type":"java.lang.Long"}]}]}],"description":" Create a function which returns the largest index of an element which\n is not greater than or equal to the element immediately preceding it. If\n no such element exists then return -1. The given array array list will not contain\n duplicate values.\n Examples:\n \u003e\u003e\u003e canArrange((new ArrayList\u003cLong\u003e(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\n (3l)\n \u003e\u003e\u003e canArrange((new ArrayList\u003cLong\u003e(Arrays.asList((long)1l, (long)2l, (long)3l))))","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given array array list will not contain\n    // duplicate values.\n    // Examples:\n    // \u003e\u003e\u003e canArrange((new ArrayList\u003cLong\u003e(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\n    // (3l)\n    // \u003e\u003e\u003e canArrange((new ArrayList\u003cLong\u003e(Arrays.asList((long)1l, (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList\u003cLong\u003e arr) {\n"}