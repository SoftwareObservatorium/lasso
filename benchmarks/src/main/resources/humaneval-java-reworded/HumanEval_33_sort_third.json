{"id":"HumanEval_33_sort_third","lql":"Problem {\n  sortThird(java.util.ArrayList\u003cjava.lang.Long\u003e)-\u003ejava.util.ArrayList\u003cjava.lang.Long\u003e\n}","sequences":[{"id":"Problem","statements":[{"operation":"sortThird","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 5l, (long) 6l, (long) 3l, (long) 4l, (long) 8l, (long) 9l, (long) 2l))","value":[5,6,3,4,8,9,2],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 2l, (long) 6l, (long) 3l, (long) 4l, (long) 8l, (long) 9l, (long) 5l))","value":[2,6,3,4,8,9,5],"type":"java.util.ArrayList"}]}]},{"id":"Problem","statements":[{"operation":"sortThird","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 5l, (long) 8l, (long) 3l, (long) 4l, (long) 6l, (long) 9l, (long) 2l))","value":[5,8,3,4,6,9,2],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 2l, (long) 8l, (long) 3l, (long) 4l, (long) 6l, (long) 9l, (long) 5l))","value":[2,8,3,4,6,9,5],"type":"java.util.ArrayList"}]}]},{"id":"Problem","statements":[{"operation":"sortThird","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 5l, (long) 6l, (long) 9l, (long) 4l, (long) 8l, (long) 3l, (long) 2l))","value":[5,6,9,4,8,3,2],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 2l, (long) 6l, (long) 9l, (long) 4l, (long) 8l, (long) 3l, (long) 5l))","value":[2,6,9,4,8,3,5],"type":"java.util.ArrayList"}]}]},{"id":"Problem","statements":[{"operation":"sortThird","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 5l, (long) 6l, (long) 3l, (long) 4l, (long) 8l, (long) 9l, (long) 2l, (long) 1l))","value":[5,6,3,4,8,9,2,1],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 2l, (long) 6l, (long) 3l, (long) 4l, (long) 8l, (long) 9l, (long) 5l, (long) 1l))","value":[2,6,3,4,8,9,5,1],"type":"java.util.ArrayList"}]}]}],"description":" This function takes an array array list l and returns an array array list l\u0027 such that\n l\u0027 is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n to the values of the corresponding indicies of l, but sorted.\n \u003e\u003e\u003e sortThird((new ArrayList\u003cLong\u003e(Arrays.asList((long)1l, (long)2l, (long)3l))))\n (new ArrayList\u003cLong\u003e(Arrays.asList((long)1l, (long)2l, (long)3l)))\n \u003e\u003e\u003e sortThird((new ArrayList\u003cLong\u003e(Arrays.asList((long)5l, (long)6l, (long)3l, (long)4l, (long)8l, (long)9l, (long)2l))))"}