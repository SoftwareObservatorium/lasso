{"id":"HumanEval_90_next_smallest","lql":"Problem {\n  nextSmallest(java.util.ArrayList\u003cjava.lang.Long\u003e)-\u003ejava.util.Optional\u003cjava.lang.Long\u003e\n}","sequences":[{"id":"Problem","statements":[{"operation":"nextSmallest","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l, (long) 2l, (long) 3l, (long) 4l, (long) 5l))","value":[1,2,3,4,5],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"java.util.Optional.of(2l)","value":{"value":2},"type":"java.util.Optional"}]}]},{"id":"Problem","statements":[{"operation":"nextSmallest","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 5l, (long) 1l, (long) 4l, (long) 3l, (long) 2l))","value":[5,1,4,3,2],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"java.util.Optional.of(2l)","value":{"value":2},"type":"java.util.Optional"}]}]},{"id":"Problem","statements":[{"operation":"nextSmallest","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList())","value":[],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"java.util.Optional.empty()","value":{},"type":"java.util.Optional"}]}]},{"id":"Problem","statements":[{"operation":"nextSmallest","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l, (long) 1l))","value":[1,1],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"java.util.Optional.empty()","value":{},"type":"java.util.Optional"}]}]},{"id":"Problem","statements":[{"operation":"nextSmallest","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l, (long) 1l, (long) 1l, (long) 1l, (long) 0l))","value":[1,1,1,1,0],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"java.util.Optional.of(1l)","value":{"value":1},"type":"java.util.Optional"}]}]},{"id":"Problem","statements":[{"operation":"nextSmallest","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l, (long) 1l))","value":[1,1],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"java.util.Optional.empty()","value":{},"type":"java.util.Optional"}]}]},{"id":"Problem","statements":[{"operation":"nextSmallest","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) -35l, (long) 34l, (long) 12l, (long) -45l))","value":[-35,34,12,-45],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"java.util.Optional.of(-35l)","value":{"value":-35},"type":"java.util.Optional"}]}]}],"description":" You are given an array array list of integers.\n Write a function next_smallest() that returns the 2nd smallest element of the array list.\n Return null if there is no such element.\n \u003e\u003e\u003e nextSmallest((new ArrayList\u003cLong\u003e(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\n Optional.of(2l)\n \u003e\u003e\u003e nextSmallest((new ArrayList\u003cLong\u003e(Arrays.asList((long)5l, (long)1l, (long)4l, (long)3l, (long)2l))))\n Optional.of(2l)\n \u003e\u003e\u003e nextSmallest((new ArrayList\u003cLong\u003e(Arrays.asList())))\n Optional.empty()\n \u003e\u003e\u003e nextSmallest((new ArrayList\u003cLong\u003e(Arrays.asList((long)1l, (long)1l))))"}