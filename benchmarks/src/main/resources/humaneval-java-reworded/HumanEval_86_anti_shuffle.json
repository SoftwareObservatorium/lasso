{"id":"HumanEval_86_anti_shuffle","lql":"Problem {\n  antiShuffle(java.lang.String)-\u003ejava.lang.String\n}","sequences":[{"id":"Problem","statements":[{"operation":"antiShuffle","inputs":[{"code":"\"Hi\"","value":"Hi","type":"java.lang.String"}],"expectedOutputs":[{"code":"\"Hi\"","value":"Hi","type":"java.lang.String"}]}]},{"id":"Problem","statements":[{"operation":"antiShuffle","inputs":[{"code":"\"hello\"","value":"hello","type":"java.lang.String"}],"expectedOutputs":[{"code":"\"ehllo\"","value":"ehllo","type":"java.lang.String"}]}]},{"id":"Problem","statements":[{"operation":"antiShuffle","inputs":[{"code":"\"number\"","value":"number","type":"java.lang.String"}],"expectedOutputs":[{"code":"\"bemnru\"","value":"bemnru","type":"java.lang.String"}]}]},{"id":"Problem","statements":[{"operation":"antiShuffle","inputs":[{"code":"\"abcd\"","value":"abcd","type":"java.lang.String"}],"expectedOutputs":[{"code":"\"abcd\"","value":"abcd","type":"java.lang.String"}]}]},{"id":"Problem","statements":[{"operation":"antiShuffle","inputs":[{"code":"\"Hello World!!!\"","value":"Hello World!!!","type":"java.lang.String"}],"expectedOutputs":[{"code":"\"Hello !!!Wdlor\"","value":"Hello !!!Wdlor","type":"java.lang.String"}]}]},{"id":"Problem","statements":[{"operation":"antiShuffle","inputs":[{"code":"\"\"","value":"","type":"java.lang.String"}],"expectedOutputs":[{"code":"\"\"","value":"","type":"java.lang.String"}]}]},{"id":"Problem","statements":[{"operation":"antiShuffle","inputs":[{"code":"\"Hi. My name is Mister Robot. How are you?\"","value":"Hi. My name is Mister Robot. How are you?","type":"java.lang.String"}],"expectedOutputs":[{"code":"\".Hi My aemn is Meirst .Rboot How aer ?ouy\"","value":".Hi My aemn is Meirst .Rboot How aer ?ouy","type":"java.lang.String"}]}]}],"description":" Write a function that takes a string and returns an ordered version of it.\n Ordered version of string, is a string where all words (separated by space)\n are replaced by a new word where all the characters arranged in\n ascending order based on ascii value.\n Note: You should keep the order of words and blank spaces in the sentence.\n For example:\n \u003e\u003e\u003e antiShuffle((\"Hi\"))\n (\"Hi\")\n \u003e\u003e\u003e antiShuffle((\"hello\"))\n (\"ehllo\")\n \u003e\u003e\u003e antiShuffle((\"Hello World!!!\"))","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a string and returns an ordered version of it.\n    // Ordered version of string, is a string where all words (separated by space)\n    // are replaced by a new word where all the characters arranged in\n    // ascending order based on ascii value.\n    // Note: You should keep the order of words and blank spaces in the sentence.\n    // For example:\n    // \u003e\u003e\u003e antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // \u003e\u003e\u003e antiShuffle((\"hello\"))\n    // (\"ehllo\")\n    // \u003e\u003e\u003e antiShuffle((\"Hello World!!!\"))\n    // (\"Hello !!!Wdlor\")\n    public static String antiShuffle(String s) {\n"}