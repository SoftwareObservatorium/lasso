{"id":"mbpp_100_next_smallest_palindrome","lql":"Problem {\n  nextSmallestPalindrome(long)-\u003elong\n}","sequences":[{"id":"Problem","statements":[{"operation":"nextSmallestPalindrome","inputs":[{"code":"99l","value":99,"type":"java.lang.Long"}],"expectedOutputs":[{"code":"101l","value":101,"type":"java.lang.Long"}]}]},{"id":"Problem","statements":[{"operation":"nextSmallestPalindrome","inputs":[{"code":"1221l","value":1221,"type":"java.lang.Long"}],"expectedOutputs":[{"code":"1331l","value":1331,"type":"java.lang.Long"}]}]},{"id":"Problem","statements":[{"operation":"nextSmallestPalindrome","inputs":[{"code":"120l","value":120,"type":"java.lang.Long"}],"expectedOutputs":[{"code":"121l","value":121,"type":"java.lang.Long"}]}]}],"description":"","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    public static long nextSmallestPalindrome(long num) {\n"}