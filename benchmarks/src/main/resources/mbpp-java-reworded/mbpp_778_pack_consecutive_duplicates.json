{"id":"mbpp_778_pack_consecutive_duplicates","lql":"Problem {\n  packConsecutiveDuplicates(java.util.ArrayList\u003cjava.lang.Object\u003e)-\u003ejava.util.ArrayList\u003cjava.util.ArrayList\u003cjava.lang.Object\u003e\u003e\n}","sequences":[{"id":"Problem","statements":[{"operation":"packConsecutiveDuplicates","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Object\u003e(java.util.Arrays.asList((long) 0l, (long) 0l, (long) 1l, (long) 2l, (long) 3l, (long) 4l, (long) 4l, (long) 5l, (long) 6l, (long) 6l, (long) 6l, (long) 7l, (long) 8l, (long) 9l, (long) 4l, (long) 4l))","value":[0,0,1,2,3,4,4,5,6,6,6,7,8,9,4,4],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"new java.util.ArrayList\u003cjava.util.ArrayList\u003cjava.lang.Object\u003e\u003e(java.util.Arrays.asList((ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 0l, (long) 0l)), (ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l)), (ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 2l)), (ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 3l)), (ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 4l, (long) 4l)), (ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 5l)), (ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 6l, (long) 6l, (long) 6l)), (ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 7l)), (ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 8l)), (ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 9l)), (ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 4l, (long) 4l))))","value":[[0,0],[1],[2],[3],[4,4],[5],[6,6,6],[7],[8],[9],[4,4]],"type":"java.util.ArrayList"}]}]},{"id":"Problem","statements":[{"operation":"packConsecutiveDuplicates","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Object\u003e(java.util.Arrays.asList((long) 10l, (long) 10l, (long) 15l, (long) 19l, (long) 18l, (long) 18l, (long) 17l, (long) 26l, (long) 26l, (long) 17l, (long) 18l, (long) 10l))","value":[10,10,15,19,18,18,17,26,26,17,18,10],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"new java.util.ArrayList\u003cjava.util.ArrayList\u003cjava.lang.Object\u003e\u003e(java.util.Arrays.asList((ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 10l, (long) 10l)), (ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 15l)), (ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 19l)), (ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 18l, (long) 18l)), (ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 17l)), (ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 26l, (long) 26l)), (ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 17l)), (ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 18l)), (ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 10l))))","value":[[10,10],[15],[19],[18,18],[17],[26,26],[17],[18],[10]],"type":"java.util.ArrayList"}]}]},{"id":"Problem","statements":[{"operation":"packConsecutiveDuplicates","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Object\u003e(java.util.Arrays.asList((String) \"a\", (String) \"a\", (String) \"b\", (String) \"c\", (String) \"d\", (String) \"d\"))","value":["a","a","b","c","d","d"],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"new java.util.ArrayList\u003cjava.util.ArrayList\u003cjava.lang.Object\u003e\u003e(java.util.Arrays.asList((ArrayList\u003cString\u003e) new java.util.ArrayList\u003cjava.lang.String\u003e(java.util.Arrays.asList((String) \"a\", (String) \"a\")), (ArrayList\u003cString\u003e) new java.util.ArrayList\u003cjava.lang.String\u003e(java.util.Arrays.asList((String) \"b\")), (ArrayList\u003cString\u003e) new java.util.ArrayList\u003cjava.lang.String\u003e(java.util.Arrays.asList((String) \"c\")), (ArrayList\u003cString\u003e) new java.util.ArrayList\u003cjava.lang.String\u003e(java.util.Arrays.asList((String) \"d\", (String) \"d\"))))","value":[["a","a"],["b"],["c"],["d","d"]],"type":"java.util.ArrayList"}]}]}],"description":"","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to pack consecutive duplicates of a given array list elements into subarray lists.\n    public static ArrayList\u003cArrayList\u003cObject\u003e\u003e packConsecutiveDuplicates(ArrayList\u003cObject\u003e list1) {\n"}