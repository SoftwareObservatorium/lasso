{"id":"mbpp_129_magic_square_test","lql":"Problem {\n  magicSquareTest(java.util.ArrayList\u003cjava.util.ArrayList\u003cjava.lang.Long\u003e\u003e)-\u003eboolean\n}","sequences":[{"id":"Problem","statements":[{"operation":"magicSquareTest","inputs":[{"code":"new java.util.ArrayList\u003cjava.util.ArrayList\u003cjava.lang.Long\u003e\u003e(java.util.Arrays.asList((ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 7l, (long) 12l, (long) 1l, (long) 14l)), (ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 2l, (long) 13l, (long) 8l, (long) 11l)), (ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 16l, (long) 3l, (long) 10l, (long) 5l)), (ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 9l, (long) 6l, (long) 15l, (long) 4l))))","value":[[7,12,1,14],[2,13,8,11],[16,3,10,5],[9,6,15,4]],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"true","value":true,"type":"java.lang.Boolean"}]}]},{"id":"Problem","statements":[{"operation":"magicSquareTest","inputs":[{"code":"new java.util.ArrayList\u003cjava.util.ArrayList\u003cjava.lang.Long\u003e\u003e(java.util.Arrays.asList((ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 2l, (long) 7l, (long) 6l)), (ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 9l, (long) 5l, (long) 1l)), (ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 4l, (long) 3l, (long) 8l))))","value":[[2,7,6],[9,5,1],[4,3,8]],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"true","value":true,"type":"java.lang.Boolean"}]}]},{"id":"Problem","statements":[{"operation":"magicSquareTest","inputs":[{"code":"new java.util.ArrayList\u003cjava.util.ArrayList\u003cjava.lang.Long\u003e\u003e(java.util.Arrays.asList((ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 2l, (long) 7l, (long) 6l)), (ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 9l, (long) 5l, (long) 1l)), (ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 4l, (long) 3l, (long) 7l))))","value":[[2,7,6],[9,5,1],[4,3,7]],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"false","value":false,"type":"java.lang.Boolean"}]}]}],"description":"","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to calculate whether the matrix is a magic square.\n    public static boolean magicSquareTest(ArrayList\u003cArrayList\u003cLong\u003e\u003e my_matrix) {\n"}