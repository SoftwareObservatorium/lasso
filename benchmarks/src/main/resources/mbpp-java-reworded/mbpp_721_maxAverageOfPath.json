{"id":"mbpp_721_maxAverageOfPath","lql":"Problem {\n  maxAverageOfPath(java.util.ArrayList\u003cjava.util.ArrayList\u003cjava.lang.Long\u003e\u003e)-\u003efloat\n}","sequences":[{"id":"Problem","statements":[{"operation":"maxAverageOfPath","inputs":[{"code":"new java.util.ArrayList\u003cjava.util.ArrayList\u003cjava.lang.Long\u003e\u003e(java.util.Arrays.asList((ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l, (long) 2l, (long) 3l)), (ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 6l, (long) 5l, (long) 4l)), (ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 7l, (long) 3l, (long) 9l))))","value":[[1,2,3],[6,5,4],[7,3,9]],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"5.2f","value":5.2,"type":"java.lang.Float"}]}]},{"id":"Problem","statements":[{"operation":"maxAverageOfPath","inputs":[{"code":"new java.util.ArrayList\u003cjava.util.ArrayList\u003cjava.lang.Long\u003e\u003e(java.util.Arrays.asList((ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 2l, (long) 3l, (long) 4l)), (ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 7l, (long) 6l, (long) 5l)), (ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 8l, (long) 4l, (long) 10l))))","value":[[2,3,4],[7,6,5],[8,4,10]],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"6.2f","value":6.2,"type":"java.lang.Float"}]}]},{"id":"Problem","statements":[{"operation":"maxAverageOfPath","inputs":[{"code":"new java.util.ArrayList\u003cjava.util.ArrayList\u003cjava.lang.Long\u003e\u003e(java.util.Arrays.asList((ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 3l, (long) 4l, (long) 5l)), (ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 8l, (long) 7l, (long) 6l)), (ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 9l, (long) 5l, (long) 11l))))","value":[[3,4,5],[8,7,6],[9,5,11]],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"7.2f","value":7.2,"type":"java.lang.Float"}]}]},{"id":"Problem","statements":[{"operation":"maxAverageOfPath","inputs":[{"code":"new java.util.ArrayList\u003cjava.util.ArrayList\u003cjava.lang.Long\u003e\u003e(java.util.Arrays.asList((ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l, (long) 2l, (long) 3l)), (ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 4l, (long) 5l, (long) 6l)), (ArrayList\u003cLong\u003e) new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 7l, (long) 8l, (long) 9l))))","value":[[1,2,3],[4,5,6],[7,8,9]],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"5.8f","value":5.8,"type":"java.lang.Float"}]}]}],"description":"","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList\u003cArrayList\u003cLong\u003e\u003e cost) {\n"}