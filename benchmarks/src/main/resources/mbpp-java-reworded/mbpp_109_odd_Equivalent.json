{"id":"mbpp_109_odd_Equivalent","lql":"Problem {\n  oddEquivalent(java.lang.String,long)-\u003elong\n}","sequences":[{"id":"Problem","statements":[{"operation":"oddEquivalent","inputs":[{"code":"\"011001\"","value":"011001","type":"java.lang.String"},{"code":"6l","value":6,"type":"java.lang.Long"}],"expectedOutputs":[{"code":"3l","value":3,"type":"java.lang.Long"}]}]},{"id":"Problem","statements":[{"operation":"oddEquivalent","inputs":[{"code":"\"11011\"","value":"11011","type":"java.lang.String"},{"code":"5l","value":5,"type":"java.lang.Long"}],"expectedOutputs":[{"code":"4l","value":4,"type":"java.lang.Long"}]}]},{"id":"Problem","statements":[{"operation":"oddEquivalent","inputs":[{"code":"\"1010\"","value":"1010","type":"java.lang.String"},{"code":"4l","value":4,"type":"java.lang.Long"}],"expectedOutputs":[{"code":"2l","value":2,"type":"java.lang.Long"}]}]}],"description":"","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    public static long oddEquivalent(String s, long n) {\n"}