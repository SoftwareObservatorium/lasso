{"id":"mbpp_564_count_Pairs","lql":"Problem {\n  countPairs(java.util.ArrayList\u003cjava.lang.Long\u003e,long)-\u003elong\n}","sequences":[{"id":"Problem","statements":[{"operation":"countPairs","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l, (long) 2l, (long) 1l))","value":[1,2,1],"type":"java.util.ArrayList"},{"code":"3l","value":3,"type":"java.lang.Long"}],"expectedOutputs":[{"code":"2l","value":2,"type":"java.lang.Long"}]}]},{"id":"Problem","statements":[{"operation":"countPairs","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l, (long) 1l, (long) 1l, (long) 1l))","value":[1,1,1,1],"type":"java.util.ArrayList"},{"code":"4l","value":4,"type":"java.lang.Long"}],"expectedOutputs":[{"code":"0l","value":0,"type":"java.lang.Long"}]}]},{"id":"Problem","statements":[{"operation":"countPairs","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l, (long) 2l, (long) 3l, (long) 4l, (long) 5l))","value":[1,2,3,4,5],"type":"java.util.ArrayList"},{"code":"5l","value":5,"type":"java.lang.Long"}],"expectedOutputs":[{"code":"10l","value":10,"type":"java.lang.Long"}]}]}],"description":"","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function which takes an array array list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long countPairs(ArrayList\u003cLong\u003e arr, long n) {\n"}