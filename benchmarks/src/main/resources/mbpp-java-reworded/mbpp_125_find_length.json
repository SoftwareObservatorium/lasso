{"id":"mbpp_125_find_length","lql":"Problem {\n  findLength(java.lang.String)-\u003elong\n}","sequences":[{"id":"Problem","statements":[{"operation":"findLength","inputs":[{"code":"\"11000010001\"","value":"11000010001","type":"java.lang.String"}],"expectedOutputs":[{"code":"6l","value":6,"type":"java.lang.Long"}]}]},{"id":"Problem","statements":[{"operation":"findLength","inputs":[{"code":"\"10111\"","value":"10111","type":"java.lang.String"}],"expectedOutputs":[{"code":"1l","value":1,"type":"java.lang.Long"}]}]},{"id":"Problem","statements":[{"operation":"findLength","inputs":[{"code":"\"11011101100101\"","value":"11011101100101","type":"java.lang.String"}],"expectedOutputs":[{"code":"2l","value":2,"type":"java.lang.Long"}]}]}],"description":"","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    public static long findLength(String string) {\n"}