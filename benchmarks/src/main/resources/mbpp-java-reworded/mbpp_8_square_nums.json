{"id":"mbpp_8_square_nums","lql":"Problem {\n  squareNums(java.util.ArrayList\u003cjava.lang.Long\u003e)-\u003ejava.util.ArrayList\u003cjava.lang.Long\u003e\n}","sequences":[{"id":"Problem","statements":[{"operation":"squareNums","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l, (long) 2l, (long) 3l, (long) 4l, (long) 5l, (long) 6l, (long) 7l, (long) 8l, (long) 9l, (long) 10l))","value":[1,2,3,4,5,6,7,8,9,10],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 1l, (long) 4l, (long) 9l, (long) 16l, (long) 25l, (long) 36l, (long) 49l, (long) 64l, (long) 81l, (long) 100l))","value":[1,4,9,16,25,36,49,64,81,100],"type":"java.util.ArrayList"}]}]},{"id":"Problem","statements":[{"operation":"squareNums","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 10l, (long) 20l, (long) 30l))","value":[10,20,30],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 100l, (long) 400l, (long) 900l))","value":[100,400,900],"type":"java.util.ArrayList"}]}]},{"id":"Problem","statements":[{"operation":"squareNums","inputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 12l, (long) 15l))","value":[12,15],"type":"java.util.ArrayList"}],"expectedOutputs":[{"code":"new java.util.ArrayList\u003cjava.lang.Long\u003e(java.util.Arrays.asList((long) 144l, (long) 225l))","value":[144,225],"type":"java.util.ArrayList"}]}]}],"description":"","prompt":"import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find squares of individual elements in an array array list.\n    public static ArrayList\u003cLong\u003e squareNums(ArrayList\u003cLong\u003e nums) {\n"}