/*
 * LASSO - an Observatorium for the Dynamic Selection, Analysis and Comparison of Software
 * Copyright (C) 2024 Marcus Kessel (University of Mannheim) and LASSO contributers
 *
 * This file is part of LASSO.
 *
 * LASSO is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * LASSO is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with LASSO.  If not, see <https://www.gnu.org/licenses/>.
 */
package de.uni_mannheim.swt.lasso.service.systemtests.integration.current

import de.uni_mannheim.swt.lasso.cluster.ClusterEngine
import de.uni_mannheim.swt.lasso.engine.DataSourceNotFoundException
import de.uni_mannheim.swt.lasso.engine.LSLExecutionContext
import de.uni_mannheim.swt.lasso.engine.LSLExecutionResult
import de.uni_mannheim.swt.lasso.engine.LSLScript
import de.uni_mannheim.swt.lasso.engine.action.utils.DistributedFileSystemUtils
import de.uni_mannheim.swt.lasso.service.systemtests.integration.AbstractGroovySystemTest
import de.uni_mannheim.swt.lasso.service.systemtests.util.LassoTestEngine
import de.uni_mannheim.swt.lasso.srm.ClusterSRMRepository
import org.intellij.lang.annotations.Language
import org.junit.jupiter.api.Test
import tech.tablesaw.api.Table

import static org.junit.jupiter.api.Assertions.assertTrue
import static org.junit.jupiter.api.Assertions.assertFalse;
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.beans.factory.annotation.Qualifier

/**
 * Demonstrates TestGen actions
 *
 * @author mkessel
 */
class TestGenSystemTest extends AbstractGroovySystemTest {

    @Autowired
    @Qualifier("testLassoEngine")
    LassoTestEngine lassoEngine;

    @Test
    void testTestGen_benchmark_HumanEval_13_greatest_common_divisor_amplify() throws IOException, DataSourceNotFoundException {
        @Language("Groovy")
        String content = '''
import de.uni_mannheim.swt.lasso.core.model.Specification
import de.uni_mannheim.swt.lasso.engine.action.utils.SequenceUtils
import de.uni_mannheim.swt.lasso.service.Tester

dataSource 'dummy'

study(name: 'GAITestGen-Tests') {
    action(name: 'select') {
        List systems = [Tester.system("1", "Clazz", "pkg")]
        Specification spec = SequenceUtils.parseSpecificationFromLQL("Problem{ greatestCommonDivisor(long,long)->long }")
        abstraction(systems, "HumanEval_13_greatest_common_divisor", spec)
    }
    
    action(name: 'gai', type: 'GAITestGen') {
        apiUrl = "http://bagdana.informatik.uni-mannheim.de:8080/v1/chat/completions"
        apiKey = "swt4321"
        maxNoOfTests = 100
        noOfPrompts = 1
        // let's pretend those are the seed tests
        sequences = [
                'testEncode': sheet(mut:'Problem') {
                    row  '',    'create', '?mut'
                    row 6l,  'greatestCommonDivisor', 'A1', 54l, 24l
                }
        ]
        
        dependsOn 'select'
        includeAbstractions '*'
    }
    
    action(name: 'typeAware', type: 'TypeAwareMutatorTestGen') {
        noOfTests = 1
        sequenceActions = ['gai'] // mutate only tests generated by gai action
        
        dependsOn 'gai'
        includeAbstractions '*'
    }
    
    action(name: 'random', type: 'RandomTestGen') {
        noOfTests = 10
        
        dependsOn 'select'
        includeAbstractions '*'
    }
}
        '''

        //
        LSLScript scriptUnderTest = createScript(content)

        // DO EXECUTE
        LSLExecutionResult lslExecutionResult = lassoEngine.execute(scriptUnderTest)
        LSLExecutionContext lslExecutionContext = lassoEngine.getLastContext()

        // check DFS
        List<String> gaiSequences = DistributedFileSystemUtils.listSequences(lslExecutionContext, "gai", "HumanEval_13_greatest_common_divisor")
        println(gaiSequences)

        assertFalse(gaiSequences.isEmpty())

        List<String> typeAwareSequences = DistributedFileSystemUtils.listSequences(lslExecutionContext, "typeAware", "HumanEval_13_greatest_common_divisor")
        println(typeAwareSequences)

        assertFalse(typeAwareSequences.isEmpty())

        List<String> randomSequences = DistributedFileSystemUtils.listSequences(lslExecutionContext, "random", "HumanEval_13_greatest_common_divisor")
        println(randomSequences)

        assertFalse(randomSequences.isEmpty())
    }

    @Test
    void testTestGen_arena_Base64() throws IOException, DataSourceNotFoundException {
        @Language("Groovy")
        String content = '''
dataSource 'lasso_quickstart'

def totalRows = 1
def noOfAdapters = 100
// interface in LQL notation
def interfaceSpec = """Base64{encode(byte[])->byte[]}"""
study(name: 'Base64encode') {
    action(name: 'select', type: 'Select') {
        abstraction('Base64') {
            queryForClasses interfaceSpec, 'class-simple'
            rows = totalRows
            excludeClassesByKeywords(['private', 'abstract'])
            excludeTestClasses()
            excludeInternalPkgs()
        }
    }
    
    action(name: 'gai', type: 'GAITestGen') {
        apiUrl = "http://bagdana.informatik.uni-mannheim.de:8080/v1/chat/completions"
        apiKey = "swt4321"
        maxNoOfTests = 100
        noOfPrompts = 1
        // let's pretend those are the seed tests
        sequences = [
                // parameterised sheet (SSN) with default input parameter values
                // expected values are given in first row (oracle)
                'testEncode': sheet(base64:'Base64', p2:"user:pass".getBytes()) {
                    row  '',    'create', '?base64'
                    row 'dXNlcjpwYXNz'.getBytes(),  'encode',   'A1',     '?p2'
                },
                'testEncode_padding': sheet(base64:'Base64', p2:"Hello World".getBytes()) {
                    row  '',    'create', '?base64'
                    row 'SGVsbG8gV29ybGQ='.getBytes(),  'encode',   'A1',     '?p2'
                }
        ]
        
        dependsOn 'select'
        includeAbstractions '*'
    }
    
    action(name: 'typeAware', type: 'TypeAwareMutatorTestGen') {
        noOfTests = 1
        sequenceActions = ['gai'] // mutate only tests generated by gai action
        
        dependsOn 'gai'
        includeAbstractions '*'
    }
    
    action(name: 'random', type: 'RandomTestGen') {
        noOfTests = 10
        
        dependsOn 'select'
        includeAbstractions '*'
    }

    action(name: 'filter', type: 'ArenaExecute') {
        containerTimeout = 10 * 60 * 1000L // 10 minutes
        maxAdaptations = noOfAdapters // how many adaptations to try
        sequenceActions = ['gai', 'typeAware', 'random'] // get from all TestGen actions

        dependsOn 'select'
        includeAbstractions '*'
        profile('myTdsProfile') {
            scope('class') { type = 'class' }
            environment('java11') {
                image = 'maven:3.6.3-openjdk-17' // Java 17
            }
        }
    }
}
        '''

        //
        LSLScript scriptUnderTest = createScript(content)

        // DO EXECUTE
        LSLExecutionResult lslExecutionResult = lassoEngine.execute(scriptUnderTest)
        LSLExecutionContext lslExecutionContext = lassoEngine.getLastContext()

        // check DFS
        List<String> gaiSequences = DistributedFileSystemUtils.listSequences(lslExecutionContext, "gai", "Base64")
        println(gaiSequences)

        assertFalse(gaiSequences.isEmpty())

        List<String> typeAwareSequences = DistributedFileSystemUtils.listSequences(lslExecutionContext, "typeAware", "Base64")
        println(typeAwareSequences)

        assertFalse(typeAwareSequences.isEmpty())

        List<String> randomSequences = DistributedFileSystemUtils.listSequences(lslExecutionContext, "random", "Base64")
        println(randomSequences)

        assertFalse(randomSequences.isEmpty())

        // put
        ClusterEngine clusterEngine = lslExecutionContext.getConfiguration().getService(ClusterEngine.class);

        // also make sure that the SRM is initialized (otherwise the client has no way to put cells)
        ClusterSRMRepository srmRepository = clusterEngine.getClusterSRMRepository();
        Table table = srmRepository.sqlToTable("SELECT * FROM CELLVALUE WHERE executionId = ?", lslExecutionContext.getExecutionId());
        System.out.println(table.printAll());
    }
}
