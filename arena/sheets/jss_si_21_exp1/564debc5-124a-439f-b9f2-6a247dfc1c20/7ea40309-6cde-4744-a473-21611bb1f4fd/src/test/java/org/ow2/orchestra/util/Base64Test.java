/*
 * LASSO - an Observatorium for the Dynamic Selection, Analysis and Comparison of Software
 * Copyright (C) 2024 Marcus Kessel (University of Mannheim) and LASSO contributers
 *
 * This file is part of LASSO.
 *
 * LASSO is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * LASSO is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with LASSO.  If not, see <https://www.gnu.org/licenses/>.
 */
/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 18:14:37 GMT 2021
 */

package org.ow2.orchestra.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.io.ByteArrayInputStream;
import java.io.DataOutputStream;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.ow2.orchestra.util.Base64;

public class Base64Test {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decode((String) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decode("8]5Mk3e^IO8QU3[");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 127
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = Base64.decode("");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = Base64.decode("MnvC");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Base64.InputStream base64_InputStream0 = new Base64.InputStream(byteArrayInputStream0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(base64_InputStream0);
      } catch(Throwable e) {
         //
         // Improperly padded Base64 input.
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Base64.InputStream base64_InputStream0 = new Base64.InputStream(mockFileInputStream0);
      Base64.InputStream base64_InputStream1 = new Base64.InputStream(base64_InputStream0, 0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Not enough arguments.");
      Base64.OutputStream base64_OutputStream0 = new Base64.OutputStream(mockPrintStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(base64_OutputStream0);
      ObjectOutputStream objectOutputStream1 = new ObjectOutputStream(base64_OutputStream0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      Base64.OutputStream base64_OutputStream0 = new Base64.OutputStream(dataOutputStream0, 3005);
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream(base64_OutputStream0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Base64.OutputStream base64_OutputStream0 = new Base64.OutputStream(pipedOutputStream0, 1381);
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream(base64_OutputStream0);
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = Base64.decode("Ti=gq_z%.");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = Base64.decode("R/1kU9]; ~");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = Base64.decode("Bad Base64 input character at ");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = Base64.decode("7=d=9uo,blY!b");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = Base64.decode("7om pWrameers arenull in ");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 1024);
      Base64.InputStream base64_InputStream0 = new Base64.InputStream(pushbackInputStream0, 39);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(base64_InputStream0);
      } catch(Throwable e) {
         //
         // Stream closed
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Base64.InputStream base64_InputStream0 = new Base64.InputStream(sequenceInputStream0, 19);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(base64_InputStream0);
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      Base64.OutputStream base64_OutputStream0 = new Base64.OutputStream(dataOutputStream0, 2984);
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream(base64_OutputStream0);
      } catch(Throwable e) {
         //
         // Invalid character in Base64 data.
         //
      }
  }
}
