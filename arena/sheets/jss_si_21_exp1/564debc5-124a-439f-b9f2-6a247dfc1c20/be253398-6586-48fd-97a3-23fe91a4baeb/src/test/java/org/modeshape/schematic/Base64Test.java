/*
 * LASSO - an Observatorium for the Dynamic Selection, Analysis and Comparison of Software
 * Copyright (C) 2024 Marcus Kessel (University of Mannheim) and LASSO contributers
 *
 * This file is part of LASSO.
 *
 * LASSO is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * LASSO is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with LASSO.  If not, see <https://www.gnu.org/licenses/>.
 */
/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 18:21:00 GMT 2021
 */

package org.modeshape.schematic;

import org.junit.Test;
import static org.junit.Assert.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.modeshape.schematic.Base64;

public class Base64Test {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      byte[] byteArray0 = Base64.decode("");
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decode("D");
      } catch(IllegalArgumentException e) {
         //
         // Base64-encoded string must have at least four characters, but length specified was 1
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decode((String) null);
      } catch(NullPointerException e) {
         //
         // Input string was null.
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      byte[] byteArray0 = Base64.decode("Source cannot be null");
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Base64.InputStream base64_InputStream0 = new Base64.InputStream((InputStream) null);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Base64.InputStream base64_InputStream0 = new Base64.InputStream((InputStream) null, 1284);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Base64.OutputStream base64_OutputStream0 = new Base64.OutputStream(byteArrayOutputStream0);
      Base64.OutputStream base64_OutputStream1 = new Base64.OutputStream(base64_OutputStream0, (-4003));
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "{:B$;M2A@I@1Cxx");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Base64.OutputStream base64_OutputStream0 = new Base64.OutputStream(mockPrintStream0, (-1674));
      Base64.OutputStream base64_OutputStream1 = new Base64.OutputStream(base64_OutputStream0, 617);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      try { 
        Base64.decode("4|%G");
      } catch(IOException e) {
         //
         // Bad Base64 input character decimal 124 in array position 1
         //
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      Base64.InputStream base64_InputStream0 = new Base64.InputStream(bufferedInputStream0, (-2119));
  }
}
