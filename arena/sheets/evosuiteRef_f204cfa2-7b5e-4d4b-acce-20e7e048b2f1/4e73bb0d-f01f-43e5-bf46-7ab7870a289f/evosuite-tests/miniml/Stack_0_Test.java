/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 04 15:30:00 GMT 2021
 */

package miniml;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.EmptyStackException;
import miniml.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Stack_0_Test {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "miniml.Stack"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("user.dir", "/usr/src/mymaven/4e73bb0d-f01f-43e5-bf46-7ab7870a289f"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Stack_0_Test.class.getClassLoader() ,
      "miniml.Stack"
    );
  } 

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Stack_0_Test.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "miniml.Stack"
    );
  }

  //Test case number: 0
  /*
   * 29 covered goals:
   * Goal 1. miniml.Stack.push(Ljava/lang/Object;)V: root-Branch
   * Goal 2. miniml.Stack.<init>()V: root-Branch
   * Goal 3. miniml.Stack.pop()Ljava/lang/Object;: I5 Branch 3 IFLE L57 - true
   * Goal 4. miniml.Stack.pop()Ljava/lang/Object;: I11 Branch 4 IFEQ L57 - true
   * Goal 5. Branch miniml.Stack.push(Ljava/lang/Object;)V: root-Branch in context: 
   * Goal 6. Branch miniml.Stack.<init>()V: root-Branch in context: 
   * Goal 7. Branch miniml.Stack.pop()Ljava/lang/Object;: I11 Branch 4 IFEQ L57 - true in context: 
   * Goal 8. Branch miniml.Stack.pop()Ljava/lang/Object;: I5 Branch 3 IFLE L57 - true in context: 
   * Goal 9. miniml.Stack.<init>()V: Line 24
   * Goal 10. miniml.Stack.<init>()V: Line 25
   * Goal 11. miniml.Stack.<init>()V: Line 26
   * Goal 12. miniml.Stack.pop()Ljava/lang/Object;: Line 57
   * Goal 13. miniml.Stack.pop()Ljava/lang/Object;: Line 60
   * Goal 14. miniml.Stack.push(Ljava/lang/Object;)V: Line 34
   * Goal 15. miniml.Stack.push(Ljava/lang/Object;)V: Line 35
   * Goal 16. [METHOD] miniml.Stack.<init>()V
   * Goal 17. [METHOD] miniml.Stack.pop()Ljava/lang/Object;
   * Goal 18. [METHOD] miniml.Stack.push(Ljava/lang/Object;)V
   * Goal 19. [METHODNOEX] miniml.Stack.<init>()V
   * Goal 20. [METHODNOEX] miniml.Stack.pop()Ljava/lang/Object;
   * Goal 21. [METHODNOEX] miniml.Stack.push(Ljava/lang/Object;)V
   * Goal 22. Weak Mutation 12: miniml.Stack.pop()Ljava/lang/Object;:57 - ReplaceComparisonOperator <= -> ==
   * Goal 23. Weak Mutation 15: miniml.Stack.pop()Ljava/lang/Object;:57 - ReplaceConstant - 0 -> 1
   * Goal 24. Weak Mutation 16: miniml.Stack.pop()Ljava/lang/Object;:57 - ReplaceComparisonOperator == -> !=
   * Goal 25. Weak Mutation 17: miniml.Stack.pop()Ljava/lang/Object;:60 - ReplaceConstant - 1 -> 0
   * Goal 26. Weak Mutation 18: miniml.Stack.pop()Ljava/lang/Object;:60 - ReplaceArithmeticOperator - -> +
   * Goal 27. Weak Mutation 19: miniml.Stack.pop()Ljava/lang/Object;:60 - ReplaceArithmeticOperator - -> %
   * Goal 28. Weak Mutation 20: miniml.Stack.pop()Ljava/lang/Object;:60 - ReplaceArithmeticOperator - -> *
   * Goal 29. Weak Mutation 21: miniml.Stack.pop()Ljava/lang/Object;:60 - ReplaceArithmeticOperator - -> /
   */

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      Integer integer0 = new Integer((-4237));
      stack0.push(integer0);
      stack0.push(integer0);
      Object object0 = stack0.pop();
      assertEquals((-4237), object0);
  }

  //Test case number: 1
  /*
   * 29 covered goals:
   * Goal 1. miniml.Stack.push(Ljava/lang/Object;)V: root-Branch
   * Goal 2. miniml.Stack.<init>()V: root-Branch
   * Goal 3. miniml.Stack.peek()Ljava/lang/Object;: I5 Branch 1 IFLE L44 - true
   * Goal 4. miniml.Stack.peek()Ljava/lang/Object;: I11 Branch 2 IFEQ L44 - true
   * Goal 5. Branch miniml.Stack.push(Ljava/lang/Object;)V: root-Branch in context: 
   * Goal 6. Branch miniml.Stack.<init>()V: root-Branch in context: 
   * Goal 7. Branch miniml.Stack.peek()Ljava/lang/Object;: I5 Branch 1 IFLE L44 - true in context: 
   * Goal 8. Branch miniml.Stack.peek()Ljava/lang/Object;: I11 Branch 2 IFEQ L44 - true in context: 
   * Goal 9. miniml.Stack.<init>()V: Line 24
   * Goal 10. miniml.Stack.<init>()V: Line 25
   * Goal 11. miniml.Stack.<init>()V: Line 26
   * Goal 12. miniml.Stack.peek()Ljava/lang/Object;: Line 44
   * Goal 13. miniml.Stack.peek()Ljava/lang/Object;: Line 47
   * Goal 14. miniml.Stack.push(Ljava/lang/Object;)V: Line 34
   * Goal 15. miniml.Stack.push(Ljava/lang/Object;)V: Line 35
   * Goal 16. [METHOD] miniml.Stack.<init>()V
   * Goal 17. [METHOD] miniml.Stack.peek()Ljava/lang/Object;
   * Goal 18. [METHOD] miniml.Stack.push(Ljava/lang/Object;)V
   * Goal 19. [METHODNOEX] miniml.Stack.<init>()V
   * Goal 20. [METHODNOEX] miniml.Stack.peek()Ljava/lang/Object;
   * Goal 21. [METHODNOEX] miniml.Stack.push(Ljava/lang/Object;)V
   * Goal 22. Weak Mutation 1: miniml.Stack.peek()Ljava/lang/Object;:44 - ReplaceComparisonOperator <= -> ==
   * Goal 23. Weak Mutation 4: miniml.Stack.peek()Ljava/lang/Object;:44 - ReplaceConstant - 0 -> 1
   * Goal 24. Weak Mutation 5: miniml.Stack.peek()Ljava/lang/Object;:44 - ReplaceComparisonOperator == -> !=
   * Goal 25. Weak Mutation 6: miniml.Stack.peek()Ljava/lang/Object;:47 - ReplaceConstant - 1 -> 0
   * Goal 26. Weak Mutation 7: miniml.Stack.peek()Ljava/lang/Object;:47 - ReplaceArithmeticOperator - -> +
   * Goal 27. Weak Mutation 8: miniml.Stack.peek()Ljava/lang/Object;:47 - ReplaceArithmeticOperator - -> %
   * Goal 28. Weak Mutation 9: miniml.Stack.peek()Ljava/lang/Object;:47 - ReplaceArithmeticOperator - -> *
   * Goal 29. Weak Mutation 10: miniml.Stack.peek()Ljava/lang/Object;:47 - ReplaceArithmeticOperator - -> /
   */

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      Integer integer0 = new Integer((-4237));
      stack0.push(integer0);
      stack0.push(integer0);
      Object object0 = stack0.peek();
      assertEquals((-4237), object0);
  }

  //Test case number: 2
  /*
   * 19 covered goals:
   * Goal 1. miniml.Stack.push(Ljava/lang/Object;)V: root-Branch
   * Goal 2. miniml.Stack.<init>()V: root-Branch
   * Goal 3. miniml.Stack.size()I: root-Branch
   * Goal 4. Branch miniml.Stack.size()I: root-Branch in context: 
   * Goal 5. Branch miniml.Stack.push(Ljava/lang/Object;)V: root-Branch in context: 
   * Goal 6. Branch miniml.Stack.<init>()V: root-Branch in context: 
   * Goal 7. [Output]: miniml.Stack.size()I:Positive
   * Goal 8. miniml.Stack.<init>()V: Line 24
   * Goal 9. miniml.Stack.<init>()V: Line 25
   * Goal 10. miniml.Stack.<init>()V: Line 26
   * Goal 11. miniml.Stack.push(Ljava/lang/Object;)V: Line 34
   * Goal 12. miniml.Stack.push(Ljava/lang/Object;)V: Line 35
   * Goal 13. miniml.Stack.size()I: Line 78
   * Goal 14. [METHOD] miniml.Stack.<init>()V
   * Goal 15. [METHOD] miniml.Stack.push(Ljava/lang/Object;)V
   * Goal 16. [METHOD] miniml.Stack.size()I
   * Goal 17. [METHODNOEX] miniml.Stack.<init>()V
   * Goal 18. [METHODNOEX] miniml.Stack.push(Ljava/lang/Object;)V
   * Goal 19. [METHODNOEX] miniml.Stack.size()I
   */

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      stack0.push((String) null);
      int int0 = stack0.size();
      assertEquals(1, int0);
  }

  //Test case number: 3
  /*
   * 29 covered goals:
   * Goal 1. miniml.Stack.push(Ljava/lang/Object;)V: root-Branch
   * Goal 2. miniml.Stack.<init>()V: root-Branch
   * Goal 3. miniml.Stack.pop()Ljava/lang/Object;: I5 Branch 3 IFLE L57 - true
   * Goal 4. miniml.Stack.pop()Ljava/lang/Object;: I11 Branch 4 IFEQ L57 - true
   * Goal 5. Branch miniml.Stack.push(Ljava/lang/Object;)V: root-Branch in context: 
   * Goal 6. Branch miniml.Stack.<init>()V: root-Branch in context: 
   * Goal 7. Branch miniml.Stack.pop()Ljava/lang/Object;: I11 Branch 4 IFEQ L57 - true in context: 
   * Goal 8. Branch miniml.Stack.pop()Ljava/lang/Object;: I5 Branch 3 IFLE L57 - true in context: 
   * Goal 9. [Output]: miniml.Stack.pop()Ljava/lang/Object;:Null
   * Goal 10. miniml.Stack.<init>()V: Line 24
   * Goal 11. miniml.Stack.<init>()V: Line 25
   * Goal 12. miniml.Stack.<init>()V: Line 26
   * Goal 13. miniml.Stack.pop()Ljava/lang/Object;: Line 57
   * Goal 14. miniml.Stack.pop()Ljava/lang/Object;: Line 60
   * Goal 15. miniml.Stack.push(Ljava/lang/Object;)V: Line 34
   * Goal 16. miniml.Stack.push(Ljava/lang/Object;)V: Line 35
   * Goal 17. [METHOD] miniml.Stack.<init>()V
   * Goal 18. [METHOD] miniml.Stack.pop()Ljava/lang/Object;
   * Goal 19. [METHOD] miniml.Stack.push(Ljava/lang/Object;)V
   * Goal 20. [METHODNOEX] miniml.Stack.<init>()V
   * Goal 21. [METHODNOEX] miniml.Stack.pop()Ljava/lang/Object;
   * Goal 22. [METHODNOEX] miniml.Stack.push(Ljava/lang/Object;)V
   * Goal 23. Weak Mutation 12: miniml.Stack.pop()Ljava/lang/Object;:57 - ReplaceComparisonOperator <= -> ==
   * Goal 24. Weak Mutation 15: miniml.Stack.pop()Ljava/lang/Object;:57 - ReplaceConstant - 0 -> 1
   * Goal 25. Weak Mutation 16: miniml.Stack.pop()Ljava/lang/Object;:57 - ReplaceComparisonOperator == -> !=
   * Goal 26. Weak Mutation 17: miniml.Stack.pop()Ljava/lang/Object;:60 - ReplaceConstant - 1 -> 0
   * Goal 27. Weak Mutation 18: miniml.Stack.pop()Ljava/lang/Object;:60 - ReplaceArithmeticOperator - -> +
   * Goal 28. Weak Mutation 20: miniml.Stack.pop()Ljava/lang/Object;:60 - ReplaceArithmeticOperator - -> *
   * Goal 29. Weak Mutation 21: miniml.Stack.pop()Ljava/lang/Object;:60 - ReplaceArithmeticOperator - -> /
   */

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      stack0.push((Object) null);
      Object object0 = stack0.pop();
      assertNull(object0);
  }

  //Test case number: 4
  /*
   * 29 covered goals:
   * Goal 1. miniml.Stack.push(Ljava/lang/Object;)V: root-Branch
   * Goal 2. miniml.Stack.<init>()V: root-Branch
   * Goal 3. miniml.Stack.pop()Ljava/lang/Object;: I5 Branch 3 IFLE L57 - true
   * Goal 4. miniml.Stack.pop()Ljava/lang/Object;: I11 Branch 4 IFEQ L57 - true
   * Goal 5. Branch miniml.Stack.push(Ljava/lang/Object;)V: root-Branch in context: 
   * Goal 6. Branch miniml.Stack.<init>()V: root-Branch in context: 
   * Goal 7. Branch miniml.Stack.pop()Ljava/lang/Object;: I11 Branch 4 IFEQ L57 - true in context: 
   * Goal 8. Branch miniml.Stack.pop()Ljava/lang/Object;: I5 Branch 3 IFLE L57 - true in context: 
   * Goal 9. [Output]: miniml.Stack.pop()Ljava/lang/Object;:NonNull
   * Goal 10. miniml.Stack.<init>()V: Line 24
   * Goal 11. miniml.Stack.<init>()V: Line 25
   * Goal 12. miniml.Stack.<init>()V: Line 26
   * Goal 13. miniml.Stack.pop()Ljava/lang/Object;: Line 57
   * Goal 14. miniml.Stack.pop()Ljava/lang/Object;: Line 60
   * Goal 15. miniml.Stack.push(Ljava/lang/Object;)V: Line 34
   * Goal 16. miniml.Stack.push(Ljava/lang/Object;)V: Line 35
   * Goal 17. [METHOD] miniml.Stack.<init>()V
   * Goal 18. [METHOD] miniml.Stack.pop()Ljava/lang/Object;
   * Goal 19. [METHOD] miniml.Stack.push(Ljava/lang/Object;)V
   * Goal 20. [METHODNOEX] miniml.Stack.<init>()V
   * Goal 21. [METHODNOEX] miniml.Stack.pop()Ljava/lang/Object;
   * Goal 22. [METHODNOEX] miniml.Stack.push(Ljava/lang/Object;)V
   * Goal 23. Weak Mutation 12: miniml.Stack.pop()Ljava/lang/Object;:57 - ReplaceComparisonOperator <= -> ==
   * Goal 24. Weak Mutation 15: miniml.Stack.pop()Ljava/lang/Object;:57 - ReplaceConstant - 0 -> 1
   * Goal 25. Weak Mutation 16: miniml.Stack.pop()Ljava/lang/Object;:57 - ReplaceComparisonOperator == -> !=
   * Goal 26. Weak Mutation 17: miniml.Stack.pop()Ljava/lang/Object;:60 - ReplaceConstant - 1 -> 0
   * Goal 27. Weak Mutation 18: miniml.Stack.pop()Ljava/lang/Object;:60 - ReplaceArithmeticOperator - -> +
   * Goal 28. Weak Mutation 20: miniml.Stack.pop()Ljava/lang/Object;:60 - ReplaceArithmeticOperator - -> *
   * Goal 29. Weak Mutation 21: miniml.Stack.pop()Ljava/lang/Object;:60 - ReplaceArithmeticOperator - -> /
   */

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      stack0.push("");
      String string0 = stack0.pop();
      assertEquals("", string0);
  }

  //Test case number: 5
  /*
   * 29 covered goals:
   * Goal 1. miniml.Stack.push(Ljava/lang/Object;)V: root-Branch
   * Goal 2. miniml.Stack.<init>()V: root-Branch
   * Goal 3. miniml.Stack.peek()Ljava/lang/Object;: I5 Branch 1 IFLE L44 - true
   * Goal 4. miniml.Stack.peek()Ljava/lang/Object;: I11 Branch 2 IFEQ L44 - true
   * Goal 5. Branch miniml.Stack.push(Ljava/lang/Object;)V: root-Branch in context: 
   * Goal 6. Branch miniml.Stack.<init>()V: root-Branch in context: 
   * Goal 7. Branch miniml.Stack.peek()Ljava/lang/Object;: I5 Branch 1 IFLE L44 - true in context: 
   * Goal 8. Branch miniml.Stack.peek()Ljava/lang/Object;: I11 Branch 2 IFEQ L44 - true in context: 
   * Goal 9. [Output]: miniml.Stack.peek()Ljava/lang/Object;:NonNull
   * Goal 10. miniml.Stack.<init>()V: Line 24
   * Goal 11. miniml.Stack.<init>()V: Line 25
   * Goal 12. miniml.Stack.<init>()V: Line 26
   * Goal 13. miniml.Stack.peek()Ljava/lang/Object;: Line 44
   * Goal 14. miniml.Stack.peek()Ljava/lang/Object;: Line 47
   * Goal 15. miniml.Stack.push(Ljava/lang/Object;)V: Line 34
   * Goal 16. miniml.Stack.push(Ljava/lang/Object;)V: Line 35
   * Goal 17. [METHOD] miniml.Stack.<init>()V
   * Goal 18. [METHOD] miniml.Stack.peek()Ljava/lang/Object;
   * Goal 19. [METHOD] miniml.Stack.push(Ljava/lang/Object;)V
   * Goal 20. [METHODNOEX] miniml.Stack.<init>()V
   * Goal 21. [METHODNOEX] miniml.Stack.peek()Ljava/lang/Object;
   * Goal 22. [METHODNOEX] miniml.Stack.push(Ljava/lang/Object;)V
   * Goal 23. Weak Mutation 1: miniml.Stack.peek()Ljava/lang/Object;:44 - ReplaceComparisonOperator <= -> ==
   * Goal 24. Weak Mutation 4: miniml.Stack.peek()Ljava/lang/Object;:44 - ReplaceConstant - 0 -> 1
   * Goal 25. Weak Mutation 5: miniml.Stack.peek()Ljava/lang/Object;:44 - ReplaceComparisonOperator == -> !=
   * Goal 26. Weak Mutation 6: miniml.Stack.peek()Ljava/lang/Object;:47 - ReplaceConstant - 1 -> 0
   * Goal 27. Weak Mutation 7: miniml.Stack.peek()Ljava/lang/Object;:47 - ReplaceArithmeticOperator - -> +
   * Goal 28. Weak Mutation 9: miniml.Stack.peek()Ljava/lang/Object;:47 - ReplaceArithmeticOperator - -> *
   * Goal 29. Weak Mutation 10: miniml.Stack.peek()Ljava/lang/Object;:47 - ReplaceArithmeticOperator - -> /
   */

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      stack0.push("");
      String string0 = stack0.peek();
      assertEquals("", string0);
  }

  //Test case number: 6
  /*
   * 15 covered goals:
   * Goal 1. miniml.Stack.<init>()V: root-Branch
   * Goal 2. miniml.Stack.isEmpty()Z: I5 Branch 5 IFLE L69 - false
   * Goal 3. Branch miniml.Stack.<init>()V: root-Branch in context: 
   * Goal 4. Branch miniml.Stack.isEmpty()Z: I5 Branch 5 IFLE L69 - false in context: 
   * Goal 5. [Output]: miniml.Stack.isEmpty()Z:True
   * Goal 6. miniml.Stack.<init>()V: Line 24
   * Goal 7. miniml.Stack.<init>()V: Line 25
   * Goal 8. miniml.Stack.<init>()V: Line 26
   * Goal 9. miniml.Stack.isEmpty()Z: Line 69
   * Goal 10. [METHOD] miniml.Stack.<init>()V
   * Goal 11. [METHOD] miniml.Stack.isEmpty()Z
   * Goal 12. [METHODNOEX] miniml.Stack.<init>()V
   * Goal 13. [METHODNOEX] miniml.Stack.isEmpty()Z
   * Goal 14. Weak Mutation 22: miniml.Stack.isEmpty()Z:69 - ReplaceComparisonOperator <= -> -1
   * Goal 15. Weak Mutation 25: miniml.Stack.isEmpty()Z:69 - ReplaceConstant - 1 -> 0
   */

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      boolean boolean0 = stack0.isEmpty();
      assertTrue(boolean0);
  }

  //Test case number: 7
  /*
   * 21 covered goals:
   * Goal 1. miniml.Stack.push(Ljava/lang/Object;)V: root-Branch
   * Goal 2. miniml.Stack.<init>()V: root-Branch
   * Goal 3. miniml.Stack.isEmpty()Z: I5 Branch 5 IFLE L69 - true
   * Goal 4. Branch miniml.Stack.push(Ljava/lang/Object;)V: root-Branch in context: 
   * Goal 5. Branch miniml.Stack.<init>()V: root-Branch in context: 
   * Goal 6. Branch miniml.Stack.isEmpty()Z: I5 Branch 5 IFLE L69 - true in context: 
   * Goal 7. [Output]: miniml.Stack.isEmpty()Z:False
   * Goal 8. miniml.Stack.<init>()V: Line 24
   * Goal 9. miniml.Stack.<init>()V: Line 25
   * Goal 10. miniml.Stack.<init>()V: Line 26
   * Goal 11. miniml.Stack.isEmpty()Z: Line 69
   * Goal 12. miniml.Stack.push(Ljava/lang/Object;)V: Line 34
   * Goal 13. miniml.Stack.push(Ljava/lang/Object;)V: Line 35
   * Goal 14. [METHOD] miniml.Stack.<init>()V
   * Goal 15. [METHOD] miniml.Stack.isEmpty()Z
   * Goal 16. [METHOD] miniml.Stack.push(Ljava/lang/Object;)V
   * Goal 17. [METHODNOEX] miniml.Stack.<init>()V
   * Goal 18. [METHODNOEX] miniml.Stack.isEmpty()Z
   * Goal 19. [METHODNOEX] miniml.Stack.push(Ljava/lang/Object;)V
   * Goal 20. Weak Mutation 23: miniml.Stack.isEmpty()Z:69 - ReplaceComparisonOperator <= -> ==
   * Goal 21. Weak Mutation 26: miniml.Stack.isEmpty()Z:69 - ReplaceConstant - 0 -> 1
   */

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      Integer integer0 = new Integer((-4237));
      stack0.push(integer0);
      boolean boolean0 = stack0.isEmpty();
      assertFalse(boolean0);
  }

  //Test case number: 8
  /*
   * 18 covered goals:
   * Goal 1. miniml.Stack.<init>()V: root-Branch
   * Goal 2. miniml.Stack.pop()Ljava/lang/Object;: I5 Branch 3 IFLE L57 - false
   * Goal 3. miniml.Stack.pop()Ljava/lang/Object;: I11 Branch 4 IFEQ L57 - false
   * Goal 4. Branch miniml.Stack.<init>()V: root-Branch in context: 
   * Goal 5. Branch miniml.Stack.pop()Ljava/lang/Object;: I11 Branch 4 IFEQ L57 - false in context: 
   * Goal 6. Branch miniml.Stack.pop()Ljava/lang/Object;: I5 Branch 3 IFLE L57 - false in context: 
   * Goal 7. pop()Ljava/lang/Object;_java.util.EmptyStackException_EXPLICIT
   * Goal 8. miniml.Stack.<init>()V: Line 24
   * Goal 9. miniml.Stack.<init>()V: Line 25
   * Goal 10. miniml.Stack.<init>()V: Line 26
   * Goal 11. miniml.Stack.pop()Ljava/lang/Object;: Line 57
   * Goal 12. miniml.Stack.pop()Ljava/lang/Object;: Line 58
   * Goal 13. [METHOD] miniml.Stack.<init>()V
   * Goal 14. [METHOD] miniml.Stack.pop()Ljava/lang/Object;
   * Goal 15. [METHODNOEX] miniml.Stack.<init>()V
   * Goal 16. Weak Mutation 11: miniml.Stack.pop()Ljava/lang/Object;:57 - ReplaceComparisonOperator <= -> -1
   * Goal 17. Weak Mutation 14: miniml.Stack.pop()Ljava/lang/Object;:57 - ReplaceConstant - 1 -> 0
   * Goal 18. Weak Mutation 16: miniml.Stack.pop()Ljava/lang/Object;:57 - ReplaceComparisonOperator == -> !=
   */

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      // Undeclared exception!
      try { 
        stack0.pop();
        fail("Expecting exception: EmptyStackException");
      
      } catch(EmptyStackException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("miniml.Stack", e);
      }
  }

  //Test case number: 9
  /*
   * 19 covered goals:
   * Goal 1. miniml.Stack.<init>()V: root-Branch
   * Goal 2. miniml.Stack.peek()Ljava/lang/Object;: I5 Branch 1 IFLE L44 - false
   * Goal 3. miniml.Stack.peek()Ljava/lang/Object;: I11 Branch 2 IFEQ L44 - false
   * Goal 4. Branch miniml.Stack.<init>()V: root-Branch in context: 
   * Goal 5. Branch miniml.Stack.peek()Ljava/lang/Object;: I11 Branch 2 IFEQ L44 - false in context: 
   * Goal 6. Branch miniml.Stack.peek()Ljava/lang/Object;: I5 Branch 1 IFLE L44 - false in context: 
   * Goal 7. [Output]: miniml.Stack.peek()Ljava/lang/Object;:Null
   * Goal 8. miniml.Stack.<init>()V: Line 24
   * Goal 9. miniml.Stack.<init>()V: Line 25
   * Goal 10. miniml.Stack.<init>()V: Line 26
   * Goal 11. miniml.Stack.peek()Ljava/lang/Object;: Line 44
   * Goal 12. miniml.Stack.peek()Ljava/lang/Object;: Line 45
   * Goal 13. [METHOD] miniml.Stack.<init>()V
   * Goal 14. [METHOD] miniml.Stack.peek()Ljava/lang/Object;
   * Goal 15. [METHODNOEX] miniml.Stack.<init>()V
   * Goal 16. [METHODNOEX] miniml.Stack.peek()Ljava/lang/Object;
   * Goal 17. Weak Mutation 0: miniml.Stack.peek()Ljava/lang/Object;:44 - ReplaceComparisonOperator <= -> -1
   * Goal 18. Weak Mutation 3: miniml.Stack.peek()Ljava/lang/Object;:44 - ReplaceConstant - 1 -> 0
   * Goal 19. Weak Mutation 5: miniml.Stack.peek()Ljava/lang/Object;:44 - ReplaceComparisonOperator == -> !=
   */

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      Object object0 = stack0.peek();
      assertNull(object0);
  }

  //Test case number: 10
  /*
   * 13 covered goals:
   * Goal 1. miniml.Stack.<init>()V: root-Branch
   * Goal 2. miniml.Stack.size()I: root-Branch
   * Goal 3. Branch miniml.Stack.size()I: root-Branch in context: 
   * Goal 4. Branch miniml.Stack.<init>()V: root-Branch in context: 
   * Goal 5. [Output]: miniml.Stack.size()I:Zero
   * Goal 6. miniml.Stack.<init>()V: Line 24
   * Goal 7. miniml.Stack.<init>()V: Line 25
   * Goal 8. miniml.Stack.<init>()V: Line 26
   * Goal 9. miniml.Stack.size()I: Line 78
   * Goal 10. [METHOD] miniml.Stack.<init>()V
   * Goal 11. [METHOD] miniml.Stack.size()I
   * Goal 12. [METHODNOEX] miniml.Stack.<init>()V
   * Goal 13. [METHODNOEX] miniml.Stack.size()I
   */

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      int int0 = stack0.size();
      assertEquals(0, int0);
  }
}
